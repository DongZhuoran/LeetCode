/**
 * Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their 
 * sum is equal to the given target.
 *
 * Example 1:
 * Input: 
 *     5
 *    / \
 *   3   6
 *  / \   \
 * 2   4   7
 *
 * Target = 9
 * Output: True
 *
 * Example 2:
 * Input: 
 *     5
 *    / \
 *   3   6
 *  / \   \
 * 2   4   7
 *
 * Target = 28
 * Output: False
 */
 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        List<Integer> inorder = inorderTraversal(root);
        int left = 0, right = inorder.size() - 1;
        while (left < right) {
            if (inorder.get(left) + inorder.get(right) == k) {
                return true;
            } else if (inorder.get(left) + inorder.get(right) < k) {
                left++;
            } else {
                right--;
            }
        }
        return false;
    }
    
    private List<Integer> inorderTraversal(TreeNode root) {
        if (root == null) {
            return new ArrayList<>();
        }
        List<Integer> list = inorderTraversal(root.left);
        list.add(root.val);
        list.addAll(inorderTraversal(root.right));
        return list;
    }
}
