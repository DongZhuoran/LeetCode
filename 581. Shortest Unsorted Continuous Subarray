/**
 * Given an integer array, you need to find one continuous subarray that if you only sort this 
 * subarray in ascending order, then the whole array will be sorted in ascending order, too.
 *
 * You need to find the shortest such subarray and output its length.
 *
 * Example 1:
 * Input: [2, 6, 4, 8, 10, 9, 15]
 * Output: 5
 * Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array 
 * sorted in ascending order.
 * 
 * Note:
 * Then length of the input array is in range [1, 10,000].
 * The input array may contain duplicates, so ascending order here means <=. */

// Approach #1: Brute force. Time: O(n^2).
class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int l = nums.length, r = 0;
        for (int i = 0; i < nums.length - 1; ++ i) {
            for (int j = i + 1; j < nums.length; ++ j) {
                if (nums[j] < nums[i]) {
                    l = Math.min(l, i);
                    r = Math.max(r, j);
                }
            }
        }
        return r - l > 0 ? r - l + 1 : 0;
    }
}

// Approach #2: Stack. Time: O(n). Space: O(n).
class Solution {
    public int findUnsortedSubarray(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        
        int min = nums.length, max = 0;
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < nums.length; ++ i) {
            while (!stack.empty() && nums[stack.peek()] > nums[i]) {
                min = Math.min(min, stack.pop());
            }
            stack.push(i);
        }
        stack.clear();
        for (int i = nums.length - 1; i >= 0; -- i) {
            while (!stack.empty() && nums[stack.peek()] < nums[i]) {
                max = Math.max(max, stack.pop());
            }
            stack.push(i);
        }
        return max - min > 0 ? max - min + 1 : 0;
    }
}

// Approach #3: Time: O(n). Space: O(1).
class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        
        int left = 0, right = 0;
        for (int i = 0; i < nums.length; ++ i) {
            max = Math.max(max, nums[i]);
            if (nums[i] < max) right = i;
        }
        
        for (int i = nums.length - 1; i >= 0; -- i) {
            min = Math.min(min, nums[i]);
            if (nums[i] > min) left = i;
        }
        return right - left > 0 ? right - left + 1 : 0;
    }
}
