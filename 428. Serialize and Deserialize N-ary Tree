/**
 * Serialization is the process of converting a data structure or object into a sequence of bits so that it 
 * can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed 
 * later in the same or another computer environment.
 *
 * Design an algorithm to serialize and deserialize an N-ary tree. An N-ary tree is a rooted tree in which each 
 * node has no more than N children. There is no restriction on how your serialization/deserialization algorithm
 * should work. You just need to ensure that an N-ary tree can be serialized to a string and this string can be 
 * deserialized to the original tree structure.
 *
 * For example, you may serialize the following 3-ary tree
 * (see: https://leetcode.com/problems/serialize-and-deserialize-n-ary-tree/description/)
 * as [1 [3[5 6] 2 4]]. You do not necessarily need to follow this format, so please be creative and come up 
 * with different approaches yourself.
 *
 * Note:
 * N is in the range of [1, 1000]
 * Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms
 * should be stateless.
 *
 * Similar Questions: Encode N-ary Tree to Binary Tree
 */
 
/*
 * Definition for a Node.
 * class Node {
 *     int val;
 *     List<Node> children;
 *     Node() {}
 *     Node(int _val, List<Node> _children) {
 *         val = _val;
 *         children = _children;
 *     }
 * };
 */
 
class Codec {

    // Encodes a tree to a single string.
    public String serialize(Node root) {
        if (root == null) {
            return "[]";
        }
        
        String res = "[" + root.val;
        for (Node n: root.children) {
            res += serialize(n);
        }
        res += "]";
        return res;
    }
    
    // Decodes your encoded data to tree.
    public Node deserialize(String data) {
        if (data.equals("[]")) {
            return null;
        }
        
        Node root = new Node();
        int idx_post = 0;
        int idx_pre = data.indexOf("[", idx_post + 1);
        root.val = Integer.valueOf(data.substring(idx_post + 1, idx_pre));
        root.children = new ArrayList<>();
        Stack<Node> stack = new Stack<>();
        stack.push(root);
        while (!stack.empty()) {
            Node cur = stack.peek();
            if (data.charAt(idx_pre + 1) != ']') {
                idx_post = idx_pre;
                idx_pre = data.indexOf("[", idx_post + 1);
                Node child = new Node();
                child.val = Integer.valueOf(data.substring(idx_post + 1, idx_pre));
                child.chilren = new ArrayList<>();
                cur.children.add(child);
                stack.push(child);
            } else {
                idx_pre += 1;
                stack.pop();
            }
        }
        return root;
    }
}
