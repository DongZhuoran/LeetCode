/**
 * Given a 32-bit signed integer, reverse digits of an integer.
 *
 * Example 1:
 * Input: 123
 * Output: 321
 *
 * Example 2:
 * Input: -123
 * Output: -321
 *
 * Example 3:
 * Input: 120
 * Output: 21
 * 
 * Note:
 * Assume we are dealing with an environment which could only store integers 
 * within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of 
 * this problem, assume that your function returns 0 when the reversed integer overflows.
 */
 
 // Concise solution
 class Solution {
    public int reverse(int x) {
        int rev = 0;
        while (x != 0) {
            int pop = x % 10;
            x /= 10;
            if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;
            if (rev < Integer.MIN_VALUE/10 || (rev == Integer.MIN_VALUE / 10 && pop < -8)) return 0;
            rev = rev * 10 + pop;
        }
        return rev;
    }
}
 
 // Complex solution
 class Solution {
    public int reverse(int x) {
        if (x == 0) return 0;
        Stack<Character> stack = new Stack<>();
        int sign = 1;
        char[] temp = ("" + x).toCharArray();
        if (temp[0] == '-') {
            sign = -1;
        } else {
            stack.push(temp[0]);
        }
        for (int i = 1; i < temp.length; ++i) {
            stack.push(temp[i]);
        }
        StringBuilder sb = new StringBuilder();
        int n = stack.size();
        for (int i = 0; i < n; ++i) {
            sb.append(stack.pop());
        }
        int ret = 0;
        try {
            ret = sign * Integer.valueOf(sb.toString());
        } catch (Exception e) {
            return ret;
        }
        return ret;
    }
}
