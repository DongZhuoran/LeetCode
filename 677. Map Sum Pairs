/**
 * Implement a MapSum class with insert, and sum methods.
 *
 * For the method insert, you'll be given a pair of (string, integer). The string represents the key and the 
 * integer represents the value. If the key already existed, then the original key-value pair will be overridden 
 * to the new one.
 * 
 * For the method sum, you'll be given a string representing the prefix, and you need to return the sum of all 
 * the pairs' value whose key starts with the prefix.
 *
 * Example 1:
 * Input: insert("apple", 3), Output: Null
 * Input: sum("ap"), Output: 3
 * Input: insert("app", 2), Output: Null
 * Input: sum("ap"), Output: 5
 */

// Approach #1: Trie. For each operation, time complexity is O(K), where K is the length of key.
class MapSum {
    private TrieNode root;

    /** Initialize your data structure here. */
    public MapSum() {
        root = new TrieNode();
    }
    
    public void insert(String key, int val) {
        TrieNode cur = root;
        for (int i = 0; i < key.length(); ++i) {
            if (!cur.children.containsKey(key.charAt(i))) {
                cur.children.put(key.charAt(i), new TrieNode());
            }
            cur = cur.children.get(key.charAt(i));
        }
        cur.val = val;
    }
    
    public int sum(String prefix) {
        TrieNode cur = root;
        for (int i = 0; i < prefix.length(); ++i) {
            if (!cur.children.containsKey(prefix.charAt(i))) {
                return 0;
            }
            cur = cur.children.get(prefix.charAt(i));
        }
        return sum_helper(cur);
    }
    
    private int sum_helper(TrieNode root) {
        if (root.children.size() == 0) {
            return root.val;
        }
        
        int sum = root.val;
        for (TrieNode tn: root.children.values()) {
            sum += sum_helper(tn);
        }
        return sum;
    }
    
    class TrieNode {
        int val;
        Map<Character, TrieNode> children;
        public TrieNode() {
            val = 0;
            children = new HashMap<>();
        }
        public TrieNode(int _val, Map<Character, TrieNode> _children) {
            val = _val;
            children = _children;
        }
    }
}

// Approach #2: Prefix Hashmap. Time complexity of sum operation is O(1), and that of insert operation is O(K^2) with 
//              consideration of string concatenation. We can use StringBuilder here to decrease time complexity to O(k).
class MapSum {
    Map<String, Integer> map;
    Map<String, Integer> score;
    public MapSum() {
        map = new HashMap();
        score = new HashMap();
    }
    public void insert(String key, int val) {
        int delta = val - map.getOrDefault(key, 0);
        map.put(key, val);
        String prefix = "";
        for (char c: key.toCharArray()) {
            prefix += c;
            score.put(prefix, score.getOrDefault(prefix, 0) + delta);
        }
    }
    public int sum(String prefix) {
        return score.getOrDefault(prefix, 0);
    }
}

/**
 * Your MapSum object will be instantiated and called as such:
 * MapSum obj = new MapSum();
 * obj.insert(key,val);
 * int param_2 = obj.sum(prefix);
 */
