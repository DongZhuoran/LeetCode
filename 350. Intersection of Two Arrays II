/**
 * Given two arrays, write a function to compute their intersection.
 *
 * Example 1:
 * Input: nums1 = [1,2,2,1], nums2 = [2,2]
 * Output: [2,2]
 *
 * Example 2:
 * Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
 * Output: [4,9]
 *
 * Note:
 * - Each element in the result should appear as many times as it shows in both arrays.
 * - The result can be in any order.
 *
 * Follow up:
 * - What if the given array is already sorted? How would you optimize your algorithm?
 * - What if nums1's size is small compared to nums2's size? Which algorithm is better?
 * - What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?
 */
 
// Approach #1: Sort and two-pointer technique. Time complexity: O(nlogn)
class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        if (nums1 == null || nums2 == null) {
            return new int[0];
        }
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int k = 0;
        int i = 0, j = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums2[j] == nums1[i]) {
                nums2[k++] = nums2[j];
                i++;
                j++;
            } else if (nums2[j] < nums1[i]) {
                j++;
            } else {
                i++;
            }
        }
        return Arrays.copyOf(nums2, k);
    }
}

// Approach #2: HashMap. Time complexity: O(n).
class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        if (nums1 == null || nums2 == null || nums1.length == 0 || nums2.length == 0) {
            return new int[0];
        }
        Map<Integer, Integer> map = new HashMap<>();
        if (nums1.length > nums2.length) {
            int[] temp = nums1;
            nums1 = nums2;
            nums2 = temp;
        }
        for (int n: nums1) {
            map.put(n, map.getOrDefault(n, 0) + 1);
        }
        int k = 0;
        for (int n: nums2) {
            if (map.containsKey(n)) {
                nums2[k++] = n;
                if (map.get(n) == 1) {
                    map.remove(n);
                } else {
                    map.put(n, map.get(n) - 1);
                }
            }
        }
        return Arrays.copyOf(nums2, k);
    }
}
