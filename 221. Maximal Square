/**
 * Given a 2D binary matrix filled with 0's and 1's, find the largest square containing 
 * only 1's and return its area.
 *
 * Example:
 * Input: 
 * 1 0 1 0 0
 * 1 0 1 1 1
 * 1 1 1 1 1
 * 1 0 0 1 0
 * Output: 4
 */
 
// Approach #1: DP. Time complexity: O(n^2).
class Solution {
    public int maximalSquare(char[][] matrix) {
        if (matrix == null || matrix.length == 0) return 0;
        
        int m = matrix.length;
        int n = matrix[0].length;
        
        int res = 0;
        int[][] dp = new int[m][n];
        
        // 1st col
        for (int i = 0; i < m; ++ i) {
            dp[i][0] = matrix[i][0] - '0';
            res = Math.max(res, dp[i][0]);
        }
        
        // 1st row
        for (int j = 0; j < n; ++ j) {
            dp[0][j] = matrix[0][j] - '0';
            res = Math.max(res, dp[0][j]);
        }
        
        for (int i = 1; i < m; ++ i) {
            for (int j = 1; j < n; ++ j) {
                if (matrix[i][j] == '1') {
                    dp[i][j] = Math.min(dp[i - 1][j], Math.min(dp[i - 1][j - 1], dp[i][j - 1])) + 1;
                } else {
                    dp[i][j] = 0;
                }
                res = Math.max(res, dp[i][j]);
            }
        }
        
        return res * res;
    }
}
