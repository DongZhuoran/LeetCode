/**
 * There are n cities connected by m flights. Each fight starts from city u and arrives at v with
 * a price w.
 *
 * Now given all the cities and flights, together with starting city src and the destination dst, 
 * your task is to find the cheapest price from src to dst with up to k stops. If there is no such 
 * route, output -1.
 *
 * Example 1:
 * Input: 
 * n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
 * src = 0, dst = 2, k = 1
 * Output: 200
 * Explanation: 
 * The cheapest price from city 0 to city 2 with at most 1 stop costs 200, as marked red in the picture.
 * 
 * Example 2:
 * Input: 
 * n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
 * src = 0, dst = 2, k = 0
 * Output: 500
 * Explanation: 
 * The cheapest price from city 0 to city 2 with at most 0 stop costs 500, as marked blue in the picture.
 * 
 * Note:
 * 1. The number of nodes n will be in range [1, 100], with nodes labeled from 0 to n - 1.
 * 2. The size of flights will be in range [0, n * (n - 1) / 2].
 * 3. The format of each flight will be (src, dst, price).
 * 4. The price of each flight will be in the range [1, 10000].
 * 5. k is in the range of [0, n - 1].
 * 6. There will not be any duplicated flights or self cycles. 
 */
 
// Approach #1: DP. Time O(EK).
class Solution { 
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
        int[][] dist = new int[2][n];
        int INF = Integer.MAX_VALUE / 2;
        Arrays.fill(dist[0], INF);
        Arrays.fill(dist[1], INF);
        dist[0][src] = dist[1][src] = 0;

        for (int i = 0; i <= K; ++ i)
            for (int[] edge: flights)
                dist[i&1][edge[1]] = Math.min(dist[i&1][edge[1]], dist[~i&1][edge[0]] + edge[2]);

        return dist[K&1][dst] < INF ? dist[K&1][dst] : -1;
    }
}
