/**
 * This problem is an interactive problem new to the LeetCode platform.
 *
 * We are given a word list of unique words, each word is 6 letters long, and one word in this list is 
 * chosen as secret.
 *
 * You may call master.guess(word) to guess a word.  The guessed word should have type string and must
 * be from the original list with 6 lowercase letters.
 *
 * This function returns an integer type, representing the number of exact matches (value and position) 
 * of your guess to the secret word.  Also, if your guess is not in the given wordlist, it will return 
 * -1 instead.
 *
 * For each test case, you have 10 guesses to guess the word. At the end of any number of calls, if you 
 * have made 10 or less calls to master.guess and at least one of these guesses was the secret, you pass 
 * the testcase.
 *
 * Besides the example test case below, there will be 5 additional test cases, each with 100 words in 
 * the word list.  The letters of each word in those testcases were chosen independently at random from 
 * 'a' to 'z', such that every word in the given word lists is unique.
 *
 * Example 1:
 * Input: secret = "acckzz", wordlist = ["acckzz","ccbazz","eiowzz","abcczz"]
 * Explanation:
 * master.guess("aaaaaa") returns -1, because "aaaaaa" is not in wordlist.
 * master.guess("acckzz") returns 6, because "acckzz" is secret and has all 6 matches.
 * master.guess("ccbazz") returns 3, because "ccbazz" has 3 matches.
 * master.guess("eiowzz") returns 2, because "eiowzz" has 2 matches.
 * master.guess("abcczz") returns 4, because "abcczz" has 4 matches.
 * We made 5 calls to master.guess and one of them was the secret, so we pass the test case.
 * 
 * Note:  Any solutions that attempt to circumvent the judge will result in disqualification.
 */

/**
 * // This is the Master's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface Master {
 *     public int guess(String word) {}
 * }
 */

// Approach #1: Min-Max. Time O(N^2logN) Space O(N^2).
class Solution {
    int[][] H;
    public void findSecretWord(String[] wordlist, Master master) {
        int N = wordlist.length;
        H = new int[N][N];
        for (int i = 0; i < N; ++ i) {
            H[i][i] = 6;
            for (int j = i + 1; j < N; ++ j) {
                int match = 0;
                for (int k = 0; k < 6; ++ k) {
                    if (wordlist[i].charAt(k) == wordlist[j].charAt(k))
                        match ++;
                }
                H[i][j] = H[j][i] = match;
            }
        }
        
        List<Integer> possible = new ArrayList<>();
        List<Integer> path = new ArrayList<>();
        for (int i = 0; i < N; ++ i)
            possible.add(i);
        
        while (!possible.isEmpty()) {
            int guess = solve(possible, path);
            int match = master.guess(wordlist[guess]);
            if (match == 6) return;
            List<Integer> possible2 = new ArrayList<>();
            for (int i: possible)
                if (H[guess][i] == match) possible2.add(i);
            possible = possible2;
            path.add(guess);
        }
    }
    
    private int solve(List<Integer> possible, List<Integer> path) {
        if (possible.size() <= 2) return possible.get(0);
        List<Integer> group = possible;
        int res = -1;
        
        for (int guess = 0; guess < H.length; ++ guess)
            if (!path.contains(guess)) {
                List<Integer>[] groups = new ArrayList[7];
                for (int i = 0; i < 7; ++ i) groups[i] = new ArrayList<>();
                for (int i: possible)
                    if (i != guess)
                        groups[H[guess][i]].add(i);
                
                List<Integer> maxgroup = groups[0];
                for (int i = 1; i < 7; ++ i)
                    if (groups[i].size() > maxgroup.size())
                        maxgroup = groups[i];
                if (maxgroup.size() < group.size()) {
                    group = maxgroup;
                    res = guess;
                }
            }
        return res;
    }
}
