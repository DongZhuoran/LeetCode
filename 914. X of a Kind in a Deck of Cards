/**
 * In a deck of cards, each card has an integer written on it.
 * Return true if and only if you can choose X >= 2 such that it is possible to split the entire 
 * deck into 1 or more groups of cards, where:
 *
 * Each group has exactly X cards.
 * All the cards in each group have the same integer.
 *
 * Example 1:
 * Input: [1,2,3,4,4,3,2,1]
 * Output: true
 * Explanation: Possible partition [1,1],[2,2],[3,3],[4,4]
 *
 * Example 2:
 * Input: [1,1,1,2,2,2,3,3]
 * Output: false
 * Explanation: No possible partition.
 *
 * Example 3:
 * Input: [1]
 * Output: false
 * Explanation: No possible partition.
 *
 * Example 4:
 * Input: [1,1]
 * Output: true
 * Explanation: Possible partition [1,1]
 *
 * Example 5:
 * Input: [1,1,2,2,2,2]
 * Output: true
 * Explanation: Possible partition [1,1],[2,2],[2,2]
 * 
 * Note:
 * 1 <= deck.length <= 10000
 * 0 <= deck[i] < 10000
 */

// Time complexity: O(Nlog^N). Time complexity for gcd: O(log^Ci), where Ci is the number of cars with number i.
class Solution {
    public boolean hasGroupsSizeX(int[] deck) {
        if (deck == null || deck.length < 2) {
            return false;
        }
        
        Map<Integer, Integer> map = new HashMap<>();
        for (int card: deck) {
            if (map.containsKey(card)) {
                map.put(card, map.get(card) + 1);
            } else {
                map.put(card, 1);
            }
        }
        
        int g = -1;
        for (int val: map.values()) {
            if (g == -1) {
                g = val;
            } else {
                g = gcd(g, val);
            }
        }
        if (g >= 2) {
            return true;
        } else {
            return false;
        }
    }
    
    private int gcd(int x, int y) {
        return x == 0 ? y : gcd(y % x, x);
    }
}
