/**
 * Given an integer array, return the k-th smallest distance among all the pairs.
 * The distance of a pair (A, B) is defined as the absolute difference between A and B.
 *
 * Example 1:
 * Input:
 *   nums = [1,3,1]
 *   k = 1
 * Output: 0 
 * Explanation:
 *   Here are all the pairs:
 *   (1,3) -> 2
 *   (1,1) -> 0
 *   (3,1) -> 2
 * Then the 1st smallest distance pair is (1,1), and its distance is 0.
 *
 * Note:
 * 1. 2 <= len(nums) <= 10000.
 * 2. 0 <= nums[i] < 1000000.
 * 3. 1 <= k <= len(nums) * (len(nums) - 1) / 2.
 */

// Binary search with slide windows. Time complexity: O(nlogn).
class Solution {
    public int smallestDistancePair(int[] nums, int k) {
        Arrays.sort(nums);
        int lo = Integer.MAX_VALUE;
        int hi = nums[nums.length - 1] - nums[0];
        for (int i = 0; i < nums.length - 1; ++i) {
            lo = Math.min(lo, nums[i + 1] - nums[i]);
        }
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            if (countPair(nums, mid) < k) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return lo;
    }
    
    // Uses slide windows. Time complexity: O(n)
    public int countPair(int[] nums, int target) {
        int left = 0, count = 0;
        for (int i = 1; i < nums.length; ++i) {
            while (nums[i] - nums[left] > target) {
                left++;
            }
            count += i - left;
        }
        return count;
    }
}


// Time limit exceeded. Time complexity: O(n^2).
class Solution {
    public int smallestDistancePair(int[] nums, int k) {
        PriorityQueue<Integer> pQueue = new PriorityQueue<>();
        for (int i = 0; i < nums.length - 1; ++i) {
            for (int j = i + 1; j < nums.length; ++j) {
                pQueue.add(Math.abs(nums[i] - nums[j]));
            }
        }
        for (int i = 0; i < k - 1; ++i) {
            pQueue.poll();
        }
        return pQueue.peek();
    }
}
