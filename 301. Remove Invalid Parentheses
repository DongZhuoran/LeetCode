/**
 * From: https://leetcode.com/problems/remove-invalid-parentheses/
 *
 * Remove the minimum number of invalid parentheses in order to make the input string 
 * valid. Return all possible results.
 *
 * Note: The input string may contain letters other than the parentheses ( and ).
 *
 * Example 1:
 * Input: "()())()"
 * Output: ["()()()", "(())()"]
 *
 * Example 2:
 * Input: "(a)())()"
 * Output: ["(a)()()", "(a())()"]
 *
 * Example 3:
 * Input: ")("
 * Output: [""]
 */
 
// Approach #1: DFS. Time->O(2^n).
class Solution {
    Set<String> res = new HashSet<>();
    int minLen = Integer.MAX_VALUE;
    
    public List<String> removeInvalidParentheses(String s) {
        rec(s, 0, 0, 0, new StringBuilder(), 0);
        return new ArrayList<>(res);
    }
    
    public void rec(String s, int index, int left, int right, StringBuilder sb, int removed) {
        if (index == s.length()) {
            // If the current expression is valid.
            if (left == right) {
                if (removed <= minLen) {
                    if (removed < minLen) {
                        res.clear();
                        minLen = removed;
                    }
                    res.add(sb.toString());
                }
            }
        } else {
            char cur = s.charAt(index);
            int curIndex = sb.length();
            
            if (cur != '(' && cur != ')') {
                sb.append(cur);
                rec(s, index + 1, left, right, sb, removed);
                sb.deleteCharAt(curIndex);
            } else {
                // Recursion where we delete the current character and move forward
                rec(s, index + 1, left, right, sb, removed + 1);
                
                sb.append(cur);
                if (cur == '(') {
                    rec(s, index + 1, left + 1, right, sb, removed);
                } else if (left > right) {
                    rec(s, index + 1, left, right + 1, sb, removed);
                }
                sb.deleteCharAt(curIndex);
            }
        }
    }
}

/**
 * Approach #2: 
 * Explanation:
 * We all know how to check a string of parentheses is valid using a stack. Or even simpler 
 * use a counter. The counter will increase when it is ‘(‘ and decrease when it is ‘)’. Whenever 
 * the counter is negative, we have more ‘)’ than ‘(‘ in the prefix.
 * 
 * To make the prefix valid, we need to remove a ‘)’. The problem is: which one? The answer is 
 * any one in the prefix. However, if we remove any one, we will generate duplicate results, 
 * for example: s = ()), we can remove s[1] or s[2] but the result is the same (). Thus, we 
 * restrict ourself to remove the first ) in a series of concecutive )s.
 *
 * After the removal, the prefix is then valid. We then call the function recursively to solve 
 * the rest of the string. However, we need to keep another information: the last removal position.
 * If we do not have this position, we will generate duplicate by removing two ‘)’ in two steps 
 * only with a different order. For this, we keep tracking the last removal position and only 
 * remove ‘)’ after that.
 *
 * Now one may ask. What about ‘(‘? What if s = ‘(()(()’ in which we need remove ‘(‘?
 * The answer is: do the same from right to left. However a cleverer idea is: reverse the string 
 * and reuse the code!
 */
class Solution {
    public List<String> removeInvalidParentheses(String s) {
        List<String> res = new ArrayList<>();
        remove(s, res, 0, 0, new char[]{'(', ')'});
        return res;
    }
    
    public void remove(String s, List<String> res, int last_i, int last_j, char[] bracket) {
        for (int i = last_i, stack = 0; i < s.length(); ++ i) {
            if (s.charAt(i) == bracket[0]) stack ++;
            else if (s.charAt(i) == bracket[1]) stack --;
            if (stack >= 0) continue;
            for (int j = last_j; j <= i; ++ j) {
                if (s.charAt(j) == bracket[1] && (j == last_j || s.charAt(j - 1) != bracket[1])) {
                    remove(s.substring(0, j) + s.substring(j + 1, s.length()), res, i, j, bracket);
                }
            }
            return;
        }
        String reverse = new StringBuilder(s).reverse().toString();
        if (bracket[0] == '(') {
            remove(reverse, res, 0, 0, new char[]{')', '('});
        } else {
            res.add(reverse);
        }
    }
}
