/**
 * Given a set of points in the xy-plane, determine the minimum area of any rectangle formed from 
 * these points, with sides not necessarily parallel to the x and y axes.
 *
 * If there isn't any rectangle, return 0.
 *
 * Example 1:
 * Input: [[1,2],[2,1],[1,0],[0,1]]
 * Output: 2.00000
 * Explanation: The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2.
 * 
 * Example 2:
 * Input: [[0,1],[2,1],[1,1],[1,0],[2,0]]
 * Output: 1.00000
 * Explanation: The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1.
 * 
 * Example 3:
 * Input: [[0,3],[1,2],[3,1],[1,3],[2,1]]
 * Output: 0
 * Explanation: There is no possible rectangle to form from these points.
 * 
 * Example 4:
 * Input: [[3,1],[1,1],[0,1],[2,1],[3,3],[3,2],[0,2],[2,3]]
 * Output: 2.00000
 * Explanation: The minimum area rectangle occurs at [2,1],[2,3],[3,3],[3,1], with an area of 2.
 *
 * Note:
 * 1 <= points.length <= 50
 * 0 <= points[i][0] <= 40000
 * 0 <= points[i][1] <= 40000
 * All points are distinct.
 * Answers within 10^-5 of the actual value will be accepted as correct.
 */
 
// Approach #1: 
class Solution {
    public double minAreaFreeRect(int[][] points) {
        int N = points.length;
        double res = Double.MAX_VALUE;
        Map<String, List<int[]>> map = new HashMap<>();
        for (int i = 0; i < N; ++ i) {
            for (int j = i + 1; j < N; ++ j) {
                long dist = (points[i][0] - points[j][0]) * (points[i][0] - points[j][0]) +
                            (points[i][1] - points[j][1]) * (points[i][1] - points[j][1]);
                int midX = points[i][0] + points[j][0];
                int midY = points[i][1] + points[j][1];
                String key = dist + " " + midX + " " + midY;
                if (!map.containsKey(key))
                    map.put(key, new ArrayList<>());
                map.get(key).add(new int[] {i, j});
            }
        }
        
        for (List<int[]> list: map.values())
            if (list.size() > 1) {
                for (int i = 0; i < list.size(); ++ i) {
                    for (int j = i + 1; j < list.size(); ++ j) {
                        int p1 = list.get(i)[0];
                        int p2 = list.get(j)[0];
                        int p3 = list.get(j)[1];
                        double e1 = Math.sqrt((points[p1][0] - points[p2][0]) * (points[p1][0] - points[p2][0]) 
                                            + (points[p1][1] - points[p2][1]) * (points[p1][1] - points[p2][1]));
                        double e2 = Math.sqrt((points[p1][0] - points[p3][0]) * (points[p1][0] - points[p3][0]) 
                                            + (points[p1][1] - points[p3][1]) * (points[p1][1] - points[p3][1]));
                        res = Math.min(res, e1 * e2);
                    }
                }
            }
        return res == Double.MAX_VALUE ? 0.0 : res;
    }
}
