/**
 * Given a non negative integer number num. For every numbers i in the range 0 â‰¤ i â‰¤ num
 * calculate the number of 1's in their binary representation and return them as an array.
 *
 * Example 1:
 * Input: 2
 * Output: [0,1,1]
 *
 * Example 2:
 * Input: 5
 * Output: [0,1,1,2,1,2]
 *
 * Follow up:
 * It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do
 * it in linear time O(n) /possibly in a single pass?
 * Space complexity should be O(n).
 * Can you do it like a boss? Do it without using any builtin function like __builtin_popcount 
 * in c++ or in any other language. */
 
// Approach #1: Time->O(n). Space->O(n).
class Solution {
    public int[] countBits(int num) {
        int[] res = new int[num + 1];
        if (num == 0) return res;
        
        res[1] = 1;
        int i = 1;
        int j = 2;
        while (j <= num) {
            int count = 1 << (i - 1);
            int k = 1 << i;
            while (j <= num && count < k) {
                res[j++] = res[count];
                if (j <= num)
                    res[j++] = res[count] + 1;
                count ++;
            }
            i ++;
        }
        return res;
    }
}

// Approach #2:
class Solution {
    public int[] countBits(int num) {
        int[] f = new int[num + 1];
        for (int i=1; i<=num; i++) f[i] = f[i >> 1] + (i & 1);
        return f;
    }
}
