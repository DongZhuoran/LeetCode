/**
 * A message containing letters from A-Z is being encoded to numbers using the following mapping:
 * 
 * 'A' -> 1
 * 'B' -> 2
 * ...
 * 'Z' -> 26
 * Given a non-empty string containing only digits, determine the total number of ways to decode it.
 *
 * Example 1:
 * Input: "12"
 * Output: 2
 * Explanation: It could be decoded as "AB" (1 2) or "L" (12).
 *
 * Example 2:
 * Input: "226"
 * Output: 3
 * Explanation: It could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).
 */

// A more concise bottom up dp solution.
class Solution {
    public int numDecodings(String s) {
        int n = s.length();
        if (n == 0) {
            return 0;
        }
        
        int[] memo = new int[n + 1];
        memo[n] = 1;
        memo[n - 1] = s.charAt(n - 1) == '0' ? 0 : 1;
        for (int i = n - 2; i >= 0; --i) {
            if (s.charAt(i) == '0') continue;
            else if (Integer.valueOf(s.substring(i, i + 2)) <= 26) {
                memo[i] = memo[i + 1] + memo[i + 2];
            } else {
                memo[i] = memo[i + 1];
            }
        }
        
        return memo[0];
    }
}

class Solution {
    public int numDecodings(String s) {
        if (s.charAt(0) == '0') {
            return 0;
        }
        if (s.length() == 1) {
            return 1;
        }
        
        int[] d = new int[s.length()];
        d[0] = 1;
        if (s.charAt(1) != '0' && Integer.valueOf(s.substring(0, 2)) <= 26) {
            d[1] = 2;
        } else if (s.charAt(1) != '0' || Integer.valueOf(s.substring(0, 2)) <= 26) {
            d[1] = 1;
        } else {
            return 0;
        }
        for (int i = 2; i < s.length(); ++i) {
            if (s.charAt(i) != '0' && Integer.valueOf(s.substring(i - 1, i + 1)) > 9 && Integer.valueOf(s.substring(i - 1, i + 1)) <= 26) {
                d[i] = d[i - 1] + d[i - 2];
            } else if (s.charAt(i) != '0') {
                d[i] = d[i - 1];
            } else if (Integer.valueOf(s.substring(i - 1, i + 1)) > 9 && Integer.valueOf(s.substring(i - 1, i + 1)) <= 26) {
                d[i] = d[i - 2];
            } else {
                return 0;
            }
        }
        return d[s.length() - 1];
    }
}
