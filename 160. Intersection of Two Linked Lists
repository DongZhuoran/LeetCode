/**
 * Write a program to find the node at which the intersection of two singly linked lists begins.
 *
 * Examples see https://leetcode.com/problems/intersection-of-two-linked-lists/description/
 *
 * Notes:
 *   If the two linked lists have no intersection at all, return null.
 *   The linked lists must retain their original structure after the function returns.
 *   You may assume there are no cycles anywhere in the entire linked structure.
 *   Your code should preferably run in O(n) time and use only O(1) memory.
 *
 * Reference:
 * https://leetcode.com/explore/learn/card/linked-list/214/two-pointer-technique/1215/discuss/49789/My-accepted-simple-and-shortest-C++-code-with-comments-explaining-the-algorithm.-Any-comments-or-improvements
 */
 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 
// Approach #1: Get the lengths of A and B.
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if (headA == null || headB == null) return null;
        
        int lenA = 0, lenB = 0;
        ListNode curA = headA, curB = headB;
        while (curA.next != null) {
            curA = curA.next;
            lenA++;
        }
        while (curB.next != null) {
            curB = curB.next;
            lenB++;
        }
        
        if (lenA > lenB) {
            for (int i = 0; i < lenA - lenB; ++i) {
                headA = headA.next;        
            }
        } else {
            for (int i = 0; i < lenB - lenA; ++i) {
                headB = headB.next;
            }
        }
        
        while (headA != headB) {
            headA = headA.next;
            headB = headB.next;
        }
        return headA;
    }
}

// Approach #2.
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if (headA == null || headB == null) return null;
        
        ListNode l1 = headA;
        ListNode l2 = headB;
        while (l1 != l2) {
            l1 = l1 == null ? headB : l1.next;
            l2 = l2 == null ? headA : l2.next;
        }
        return l1;
    }
}
