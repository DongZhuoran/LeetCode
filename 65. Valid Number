/**
 * Validate if a given string can be interpreted as a decimal number.
 *
 * Some examples:
 * "0" => true
 * " 0.1 " => true
 * "abc" => false
 * "1 a" => false
 * "2e10" => true
 * " -90e3   " => true
 * " 1e" => false
 * "e3" => false
 * " 6e-1" => true
 * " 99e2.5 " => false
 * "53.5e93" => true
 * " --6 " => false
 * "-+3" => false
 * "95a54e53" => false
 *
 * Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing
 * one. However, here is a list of characters that can be in a valid decimal number:
 *
 * Numbers 0-9
 * Exponent - "e"
 * Positive/negative sign - "+"/"-"
 * Decimal point - "."
 * Of course, the context of these characters also matters in the input.
 *
 * Update (2015-02-10):
 * The signature of the C++ function had been updated. If you still see your function signature accepts a const char * argument, 
 * please click the reload button to reset your code definition.
 */
 
class Solution {
    public boolean isNumber(String s) {
        s = s.trim();
        if (s.length() == 0) return false;
        
        int idx = s.indexOf('e');
        if (idx == -1) {
            return helper(s.toCharArray(), true);
        } else {
            if (s.indexOf('e', idx + 1) != -1) return false;
            String[] numbers = s.split("e");
            if (numbers.length != 2) return false;
            return helper(numbers[0].toCharArray(), true) & helper(numbers[1].toCharArray(), false);
        }
    }
    
    private boolean helper(char[] ch, boolean flag) {
        if (ch.length == 0) return false;
        int i = 0;
        int dot = 0;
        if (ch[0] == '-' || ch[0] == '+') {
            i++;
        }
        if (i == ch.length) return false;
        if (ch.length == i + 1 && ch[i] == '.') return false;
        while (i < ch.length) {
            if (!Character.isDigit(ch[i]) && ch[i] != '.') {
                return false;
            } else if (ch[i] == '.') {
                if (dot == 0 && flag) {
                    dot = 1;
                } else {
                    return false;
                }
            }
            i++;
        }
        return true;
    }
}
