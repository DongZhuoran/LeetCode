/**
 * Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?
 *
 * Example:
 * Input: 3
 * Output: 5
 * Explanation:
 * Given n = 3, there are a total of 5 unique BST's:
 *    1         3     3      2      1
 *     \       /     /      / \      \
 *      3     2     1      1   3      2
 *     /     /       \                 \
 *    2     1         2                 3
 */
 
// Approach #1: Recursion. Time complexity: O(n^2).
class Solution {
    public int numTrees(int n) {
        if (n < 1) return 0;
        
        return numTreesRec(1, n);
    }
    
    public int numTreesRec(int start, int end) {
        if (start >= end) {
            return 1;
        }
        
        int res = 0;
        for (int i = start; i <= end; ++ i) {
            res += numTreesRec(start, i - 1) * numTreesRec(i + 1, end);
        }
        return res;
    }
}

// Approach #2: Dynamic programming. Time complexity: O(n^2).
class Solution {
    public int numTrees(int n) {
        if (n < 1) return 0;
        
        int[] dp = new int[n + 1];
        dp[0] = dp[1] = 1;
        for (int i = 2; i <= n; ++ i) {
            for (int j = 1; j <= i; ++ j) {
                dp[i] += dp[j - 1] * dp[i - j];
            }
        }
        return dp[n];
    }
}
