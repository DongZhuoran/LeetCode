/**
 * Given an array of n positive integers and a positive integer s, find the minimal 
 * length of a contiguous subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.
 *
 * Example: 
 * Input: s = 7, nums = [2,3,1,2,4,3]
 * Output: 2
 * Explanation: the subarray [4,3] has the minimal length under the problem constraint.
 * 
 *Follow up:
 * If you have figured out the O(n) solution, try coding another solution of which the 
 * time complexity is O(n log n). 
 */
 
 // Time complexity: O(n)
 class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        int min = Integer.MAX_VALUE;
        int k = 0;
        int sum = 0;
        for (int i = 0; i < nums.length; ++i) {
            sum += nums[i];
            while (sum >= s) {
                min = Math.min(min, i - k + 1);
                sum -= nums[k++];
            }
        }
        return min == Integer.MAX_VALUE ? 0 : min;
    }
}

// Time complexity: O(nlogn)
class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        int min = Integer.MAX_VALUE;
        for(int i=1; i<nums.length;++i){
            nums[i]+=nums[i-1];
        }
        for(int i=0; i<nums.length;++i){
            int start = i;
            int end = nums.length-1;
            int prev = (i==0)?0:nums[i-1];
            while(start<=end){
                int mid = start+(end-start)/2;
                int sum = nums[mid]-prev;
                if(sum>=s){
                    min=Math.min(min,mid-i+1);
                    end=mid-1;
                }
                else{
                    start=mid+1;
                }
            }
        }
        return (min==Integer.MAX_VALUE)?0:min;
    }
}
