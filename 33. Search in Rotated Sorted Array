/**
 * Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
 * (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
 * You are given a target value to search. If found in the array return its index, otherwise return -1.
 * You may assume no duplicate exists in the array.
 * Your algorithm's runtime complexity must be in the order of O(log n).
 *
 * Example 1:
 * Input: nums = [4,5,6,7,0,1,2], target = 0
 * Output: 4
 * 
 * Example 2:
 * Input: nums = [4,5,6,7,0,1,2], target = 3
 * Output: -1
 */
 
 // Time complexity: O(log n)
 class Solution {
    public int search(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return -1;
        }
        int left = 0, right = nums.length - 1;
        int pivot = getPivot(nums, 0, nums.length - 1);
        while (left <= right) {
            int mid = left + (right - left) / 2;
            int realMid = (mid + pivot) % nums.length;
            if (nums[realMid] == target) {
                return realMid;
            } else if (nums[realMid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return -1;
    }
    
    public int getPivot(int[] nums, int start, int end) {
        if (start > end) {
            return 0;
        }
        int pivot = start + (end - start) / 2;
        if (pivot - 1 >= start && nums[pivot] < nums[pivot - 1]) {
            return pivot;
        } else if (pivot + 1 <= end && nums[pivot] > nums[pivot + 1]) {
            return pivot + 1;
        } else {
            return Math.max(getPivot(nums, start, pivot - 1), getPivot(nums, pivot + 1, end));
        }
    }
}
 
 // Time complexity: O(n)
 class Solution {
    public int search(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return -1;
        }
        int left = 0, right = nums.length - 1;
        int pivot = getPivot(nums, 0, nums.length - 1);
        if (pivot != 0) {
            int[] front = Arrays.copyOfRange(nums, 0, pivot);
            int[] back = Arrays.copyOfRange(nums, pivot, nums.length);
            int k = 0;
            while (k < back.length) {
                nums[k] = back[k];
                k++;
            }
            while (k - back.length < front.length) {
                nums[k] = front[k - back.length];
                k++;
            }
        }
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                if (mid >= nums.length - pivot) {
                    return mid - nums.length + pivot;
                } else {
                    return mid + pivot;
                }
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return -1;
    }
    
    public int getPivot(int[] nums, int start, int end) {
        if (start > end) {
            return 0;
        }
        int pivot = start + (end - start) / 2;
        if (pivot - 1 >= start && nums[pivot] < nums[pivot - 1]) {
            return pivot;
        } else if (pivot + 1 <= end && nums[pivot] > nums[pivot + 1]) {
            return pivot + 1;
        } else {
            return Math.max(getPivot(nums, start, pivot - 1), getPivot(nums, pivot + 1, end));
        }
    }
}
