/**
 * Implement a basic calculator to evaluate a simple expression string.
 *
 * The expression string contains only non-negative integers, +, -, *, / operators and empty spaces . 
 * The integer division should truncate toward zero.
 *
 * Example 1:
 * Input: "3+2*2"
 * Output: 7
 * 
 * Example 2:
 * Input: " 3/2 "
 * Output: 1
 * 
 * Example 3:
 * Input: " 3+5 / 2 "
 * Output: 5
 * 
 * Note:
 * You may assume that the given expression is always valid.
 * Do not use the eval built-in library function. */
 
// Approach #1: Straightforward. Time: O(n). Space: O(1).
// First we can use stack with O(n) as space complexity, then it
// can be optimized to O(1) without stack.
class Solution {
    public int calculate(String s) {
        int N = s.length();
        if (s == null || N == 0) return 0;
        
        int res = 0;
        int num = 0, tmp = 0;
        char lastSign = '+';
        for (int i = 0; i < N; ++ i) {
            char c = s.charAt(i);
            if (Character.isDigit(c)) {
                num = 10 * num + c - '0';
            }
            if (i == N - 1 || !Character.isDigit(c) && ' ' != c) {
                switch (lastSign) {
                    case '+':
                        res += tmp;
                        tmp = num;
                        break;
                    case '-':
                        res += tmp;
                        tmp = -num;
                        break;
                    case '*':
                        tmp *= num;
                        break;
                    case '/':
                        tmp /= num;
                        break;
                }
                lastSign = c;
                num = 0;
            }
        }
        res += tmp;
        return res;
    }
}
