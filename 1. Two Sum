/**
 *
 * Given an array of integers, return indices of the two numbers such that they add up to a specific target.
 * 
 * You may assume that each input would have exactly one solution, and you may not use the same element twice.
 *
 * Example:
 *
 * Given nums = [2, 7, 11, 15], target = 9,
 *
 * Because nums[0] + nums[1] = 2 + 7 = 9,
 * return [0, 1].
 */
 
 /**
  * Approach 1: Brute force 
  * Complexity Analysis
  * Time complexity : O(n^2). For each element, we try to find its complement by looping through the rest 
  * of array which takes O(n) time. Therefore, the time complexity is O(n^2).
  * Space complexity : O(1). 
  */
 
 class Solution {
    public int[] twoSum(int[] nums, int target) {
        int another;
        for (int i = 0; i < nums.length; ++i) {
            another = target - nums[i];
            for (int j = i + 1; j < nums.length; ++j) {
                if (another == nums[j]) {
                    return new int[]{i, j};
                }
            }
        }
        return null;
    }
}

 /**
  * Approach 2: Two-pass Hash Table
  * Complexity Analysis
  * Time complexity : O(n). We traverse the list containing nn elements exactly twice. Since the hash 
  * table reduces the look up time to O(1), the time complexity is O(n).
  * Space complexity : O(n). The extra space required depends on the number of items stored in the hash 
  * table, which stores exactly n elements. 
  */
  
  class Solution {
      public int[] twoSum(int[] nums, int target) {
          Map<Integer, Integer> map = new harshMap<>();
          for (int i = 0; i < nums.length; ++i) {
              map.put(nums[i], i);
          }
          
          for (int i = 0; i < nums.length; ++i) {
              int complement = target - nums[i];
              if (map.containsKey(complement) && map.get(complement) != i) {
                  return new int[] {i, map.get(complement)};
              }
          }
          return null;
      }
  }


// Approach #3: One-pass hashmap
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> hm = new HashMap<>();
        for (int i = 0; i < nums.length; ++i) {
            if (hm.containsKey(nums[i])) {
                return new int[] {hm.get(nums[i]), i};
            }
            hm.put(target - nums[i], i);
        }
        return new int[0];
    }
}
