/**
 * There are a total of n courses you have to take, labeled from 0 to n-1.
 * Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed 
 * as a pair: [0,1]
 *
 * Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?
 * 
 * Example 1:
 * Input: 2, [[1,0]] 
 * Output: true
 * Explanation: There are a total of 2 courses to take. 
 *              To take course 1 you should have finished course 0. So it is possible.
 *
 * Example 2:
 * Input: 2, [[1,0],[0,1]]
 * Output: false
 * Explanation: There are a total of 2 courses to take. 
 *              To take course 1 you should have finished course 0, and to take course 0 you should
 *              also have finished course 1. So it is impossible.
 * 
 * Note:
 *   - The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph 
 *     is represented.
 *   - You may assume that there are no duplicate edges in the input prerequisites.
 */

// BFS Topological sort.
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[][] pre = new int[numCourses][numCourses];
        int[] indegrees = new int[numCourses];
        for (int[] p: prerequisites) {
            if (pre[p[0]][p[1]] == 0) {
                indegrees[p[1]]++;
            }
            pre[p[0]][p[1]] = 1;
        }
        
        int count = 0;
        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < numCourses; ++i) {
            if (indegrees[i] == 0) {
                queue.offer(i);
            }
        }
        while (!queue.isEmpty()) {
            int c = queue.poll();
            count++;
            for (int i = 0; i < numCourses; ++i) {
                if (pre[c][i] == 1) {
                    if (--indegrees[i] == 0) {
                        queue.offer(i);
                    }
                }
            }
        }
        return count == numCourses;
    }
}

// [Limited time exceeded]
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Set<Integer> courses = new HashSet<>();
        for (int i = 0; i < numCourses; ++i) {
            courses.add(i);
        }
        
        int size = courses.size();
        while (size > 0) {
            boolean res = bfs(numCourses, courses.iterator().next(), prerequisites, courses);
            if (!res) {
                return false;
            }
            size = courses.size();
        }
        return true;
    }
    
    private boolean bfs(int numCourses, int course, int[][] prerequisites, Set<Integer> courses) {
        courses.remove(course);
        Queue<Integer> queue = new LinkedList<>();
        boolean[] visited = new boolean[numCourses];
        queue.offer(course);
        visited[course] = true;
        while (!queue.isEmpty()) {
            int size = queue.size();
            int k = 0;
            for (int i = 0; i < size; ++i) {
                int c = queue.poll();
                for (int j = 0; j < prerequisites.length; ++j) {
                    if (c == prerequisites[j][0]) {
                        int nc = prerequisites[j][1];
                        if (!visited[nc]) {
                            visited[nc] = true;
                            courses.remove(nc);
                            k++;
                        }
                        queue.add(nc);
                    }
                }
            }
            if (size == queue.size() && k == 0) {
                return false;
            }
        }
        return true;
    }
}
