/**
 * You are asked to cut off trees in a forest for a golf event. The forest is represented as a non-negative 2D map, in this map:
 *   0 represents the obstacle can't be reached.
 *   1 represents the ground can be walked through.
 * The place with number bigger than 1 represents a tree can be walked through, and this positive number represents the tree's height.
 * You are asked to cut off all the trees in this forest in the order of tree's height - always cut off the tree with lowest height
 * first. And after cutting, the original place has the tree will become a grass (value 1).
 *
 * You will start from the point (0, 0) and you should output the minimum steps you need to walk to cut off all the trees. If you 
 * can't cut off all the trees, output -1 in that situation.
 *
 * You are guaranteed that no two trees have the same height and there is at least one tree needs to be cut off.
 *
 * Example 1:
 * Input: 
 * [
 *  [1,2,3],
 *  [0,0,4],
 *  [7,6,5]
 * ]
 * Output: 6
 *
 * Example 2:
 * Input: 
 * [
 *  [1,2,3],
 *  [0,0,0],
 *  [7,6,5]
 * ]
 * Output: -1
 *
 * Example 3:
 * Input: 
 * [
 *  [2,3,4],
 *  [0,0,5],
 *  [8,7,6]
 * ]
 * Output: 6
 * Explanation: You started from the point (0,0) and you can cut off the tree in (0,0) directly without walking.
 * Hint: size of the given matrix will not exceed 50x50. 
 *
 * Solutions see https://leetcode.com/problems/cut-off-trees-for-golf-event/solution/.
 */

// Time complexity: O((RC)^2).
class Solution {
    public int cutOffTree(List<List<Integer>> forest) {
        List<int[]> trees = new ArrayList<>();
        for (int r = 0; r < forest.size(); ++r) {
            for (int c = 0; c < forest.get(0).size(); ++c) {
                int v = forest.get(r).get(c);
                if (v > 1) {
                    trees.add(new int[]{v, r, c});
                }
            }
        }
        
        Collections.sort(trees, (a, b) -> Integer.compare(a[0], b[0]));
        
        int res = 0, sr = 0, sc = 0;
        for (int[] tree: trees) {
            int d = bfs(forest, sr, sc, tree[1], tree[2]);
            if (d == -1) return -1;
            res += d;
            sr = tree[1];
            sc = tree[2];
        }
        return res;
    }
    
    private int[] xs = {1, -1, 0, 0};
    private int[] ys = {0, 0, 1, -1};
    
    private int bfs(List<List<Integer>> forest, int sr, int sc, int dr, int dc) {
        int R = forest.size(), C = forest.get(0).size();
        Queue<int[]> queue = new LinkedList<>();
        boolean[][] visited = new boolean[R][C];
        queue.offer(new int[] {sr, sc});
        visited[sr][sc] = true;
        int d = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; ++i) {
                int[] pos = queue.poll();
                if (pos[0] == dr && pos[1] == dc) {
                    return d;
                }
                for (int j = 0; j < 4; ++j) {
                    int nx = pos[0] + xs[j], ny = pos[1] + ys[j];
                    if (nx >= 0 && nx < R && ny >= 0 && ny < C && 
                        !visited[nx][ny] && forest.get(nx).get(ny) > 0) {
                        visited[nx][ny] = true;
                        queue.offer(new int[]{nx, ny});
                    }
                }
            }
            d++;
        }
        return -1;
    }
}
 
