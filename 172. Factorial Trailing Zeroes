/**
 * Given an integer n, return the number of trailing zeroes in n!.
 *
 * Example 1:
 * Input: 3
 * Output: 0
 * Explanation: 3! = 6, no trailing zero.
 *
 * Example 2:
 * Input: 5
 * Output: 1
 * Explanation: 5! = 120, one trailing zero.
 * Note: Your solution should be in logarithmic time complexity.
 */
 
// Solution: You want to find the number of times 10 goes into n, which means the number of 
*            times both 5 and 2 appear. Since we always have more 2's than 5's, to get the 
*            answer, we try to find the number of times 5 appears as a factor. This is equivalent 
*            to n/5. However, we have to account for the powers of 5: 25, 125, 625... Thus, if
*            we multiply the iterator by 5 each time, ex: n/25, n/125, n/625...we can increment 
*            the count and get the answer. Now, all you need to do is to be careful about int overflow.
class Solution {
    public int trailingZeroes(int n) {
        if (n == 0) return 0;
        else return (n / 5) + trailingZeroes(n/5);
    }
}
