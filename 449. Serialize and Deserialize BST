/**
 * Serialization is the process of converting a data structure or object into a sequence of bits so that 
 * it can be stored in a file or memory buffer, or transmitted across a network connection link to be 
 * reconstructed later in the same or another computer environment.
 *
 * Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how 
 * your serialization/deserialization algorithm should work. You just need to ensure that a binary search
 * tree can be serialized to a string and this string can be deserialized to the original tree structure.
 *
 * The encoded string should be as compact as possible.
 *
 * Note: Do not use class member/global/static variables to store states. Your serialize and deserialize 
 * algorithms should be stateless. 
 */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));

// Approach #1: postorder + deque. Time O(N) Space O(N).
public class Codec {
    
    public void postorder(TreeNode node, StringBuilder sb) {
        if (node == null) return;
        postorder(node.left, sb);
        postorder(node.right, sb);
        sb.append(node.val);
        sb.append(" ");
    }

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if (root == null) return "";
        StringBuilder sb = new StringBuilder();
        postorder(root, sb);
        sb.deleteCharAt(sb.length() - 1);
        return sb.toString();
    }
    
    public TreeNode helper(int min, int max, Deque<Integer> dq) {
        if (dq.size() == 0) return null;
        int val = dq.getLast();
        if (val < min || val > max) return null;
        dq.removeLast();
        TreeNode root = new TreeNode(val);
        root.right = helper(val, max, dq);
        root.left = helper(min, val, dq);
        return root;
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data.isEmpty()) return null;
        Deque<Integer> dq = new LinkedList<>();
        for (String s: data.split("\\s+")) {
            dq.add(Integer.valueOf(s));
        }
        return helper(Integer.MIN_VALUE, Integer.MAX_VALUE, dq);
    }
}
