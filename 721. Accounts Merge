/**
 * Given a list accounts, each element accounts[i] is a list of strings, where the first element 
 * accounts[i][0] is a name, and the rest of the elements are emails representing emails of the 
 * account.
 *
 * Now, we would like to merge these accounts. Two accounts definitely belong to the same person 
 * if there is some email that is common to both accounts. Note that even if two accounts have the 
 * same name, they may belong to different people as people could have the same name. A person can 
 * have any number of accounts initially, but all of their accounts definitely have the same name.
 *
 * After merging the accounts, return the accounts in the following format: the first element of 
 * each account is the name, and the rest of the elements are emails in sorted order. The accounts 
 * themselves can be returned in any order.
 *
 * Example 1:
 * Input: 
 * accounts = [["John", "johnsmith@mail.com", "john00@mail.com"], ["John", "johnnybravo@mail.com"], 
 * ["John", "johnsmith@mail.com", "john_newyork@mail.com"], ["Mary", "mary@mail.com"]]
 * Output: [["John", 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com'],  ["John", 
 * "johnnybravo@mail.com"], ["Mary", "mary@mail.com"]]
 * Explanation: 
 * The first and third John's are the same person as they have the common email "johnsmith@mail.com".
 * The second John and Mary are different people as none of their email addresses are used by other 
 * accounts.
 * We could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], 
 * ['John', 'johnnybravo@mail.com'], ['John', 'john00@mail.com', 'john_newyork@mail.com', 
 * 'johnsmith@mail.com']] would still be accepted.
 * 
 * Note:
 * The length of accounts will be in the range [1, 1000].
 * The length of accounts[i] will be in the range [1, 10].
 * The length of accounts[i][j] will be in the range [1, 30].
 */
 
// Approach #1: Union find. Time O(AlogA), where A is # of emails.
class Solution {
    public List<List<String>> accountsMerge(List<List<String>> accounts) {
        if (accounts == null || accounts.size() == 0) return accounts;
        
        int N = accounts.size();
        DSU dsu = new DSU(N);
        
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < N; ++ i) {
            String name = "";
            for (String email: accounts.get(i)) {
                if (name == "") {
                    name = email;
                    continue;
                }
                if (!map.containsKey(email)) {
                    map.put(email, i);
                } else {
                    dsu.union(map.get(email), i);
                }
            }
        }
        
        Map<Integer, Set<String>> tmp = new HashMap<>();
        for (int i = 0; i < N; ++ i) {
            int key = dsu.find(dsu.parent[i]);
            Set<String> emails = tmp.getOrDefault(key, new HashSet<>());
            emails.addAll(accounts.get(i));
            emails.remove(accounts.get(i).get(0));
            tmp.put(key, emails);
        }
        
        List<List<String>> res = new ArrayList<>();
        for (Integer index: tmp.keySet()) {
            List<String> list = new ArrayList<>(tmp.get(index));
            Collections.sort(list);
            list.add(0, accounts.get(index).get(0));
            res.add(list);
        }
        return res;
    }
    
    class DSU {
        int[] parent;
        public DSU(int N) {
            parent = new int[N];
            for (int i = 0; i < N; ++ i) parent[i] = i;
        }
        
        private int find(int x) {
            if (parent[x] != x)
                parent[x] = find(parent[x]);
            return parent[x];
        }

        private void union(int x, int y) {
            int px = find(x), py = find(y);
            parent[py] = px;
        }
    }
}
