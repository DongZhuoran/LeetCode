/**
 * Given a binary tree, return the inorder traversal of its nodes' values.
 * Example:
 * Input: [1,null,2,3]
 *   1
 *    \
 *     2
 *    /
 *   3
 * Output: [1,3,2]
 */
 
 /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 // Iterative solution, pretty slow
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        Set<TreeNode> visited = new HashSet<>();
        Stack<TreeNode> stack = new Stack<>();
        List<Integer> inOrder = new ArrayList<>();
        if (root == null) {
            return inOrder;
        }
        stack.push(root);
        while (!stack.empty()) {
            TreeNode curNode = stack.peek();
            if (!visited.contains(curNode)) {
                if (curNode.left != null && !visited.contains(curNode.left)) {
                    stack.push(curNode.left);
                } else {
                    inOrder.add(curNode.val);
                    visited.add(curNode);
                }
            } else {
                stack.pop();
                if (curNode.right != null) {
                    stack.push(curNode.right);
                }
            }
        }
        return inOrder;
    }
}

// Recursive solution, much faster than itertive solution
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        if (root == null) {
            return new ArrayList<>();
        }
        return dfs(root);
    }
    
    public List<Integer> dfs(TreeNode root) {
        List<Integer> ret = new ArrayList<>();
        if (root.left != null) {
            ret = dfs(root.left);
        }
        ret.add(root.val);
        if (root.right != null) {
            ret.addAll(dfs(root.right));
        }
        return ret;        
    }
}

// Morris travel, much faster than recursive solution
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> inorder = new ArrayList<>();
        if (root == null) {
            return inorder;
        }
        while (root != null) {
            if (root.left != null) {
                TreeNode cur = root.left;
                while (cur.right != null && cur.right != root) {
                    cur = cur.right;
                }
                if (cur.right == null) {
                    cur.right = root;
                    root = root.left;
                } else {
                    inorder.add(root.val);
                    cur.right = null;
                    root = root.right;
                }
            } else {
                inorder.add(root.val);
                root = root.right;
            }
        }
        return inorder;
    }
}
