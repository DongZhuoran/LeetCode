/**
 * Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.
 *
 * You may assume that the array is non-empty and the majority element always exist in the array.
 *
 * Example 1:
 * Input: [3,2,3]
 * Output: 3
 *
 * Example 2:
 * Input: [2,2,1,1,1,2,2]
 * Output: 2
 */
 
// HashMap. Time complexity: O(n). Space complexity: O(n).
class Solution {
    public int majorityElement(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int n: nums) {
            map.put(n, 1 + map.getOrDefault(n, 0));
        }
        
        int N = nums.length / 2;
        for (Map.Entry<Integer, Integer> entry: map.entrySet()) {
            if (entry.getValue() > N) {
                return entry.getKey();
            }
        }
        return -1;
    }
}
