/**
 * Given an array of integers nums sorted in ascending order, find the starting 
 * and ending position of a given target value.
 * 
 * Your algorithm's runtime complexity must be in the order of O(log n).
 * If the target is not found in the array, return [-1, -1].
 *
 * Example 1:
 * Input: nums = [5,7,7,8,8,10], target = 8
 * Output: [3,4]
 *
 * Example 2:
 * Input: nums = [5,7,7,8,8,10], target = 6
 * Output: [-1,-1]
 */
 
// A more concise solution. The tricky thing here is you have to make mid biasedto the rigth 
// when you find the right end
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] ret = {-1, -1};
        if (nums == null || nums.length == 0) {
            return ret;
        }
        
        int left = 0, right = nums.length - 1;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        if (nums[left] != target) {
            return ret;
        } else {
            ret[0] = left;
        }
        
        right = nums.length - 1;
        while (left < right) {
            int mid = left + (right - left) / 2 + 1;  // Make mid biased to the right
            if (nums[mid] > target) {
                right = mid - 1;
            } else {
                left = mid;
            }
        }
        ret[1] = left;
        return ret;
    }
}
 
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] ret = {-1, -1};
        if (nums == null || nums.length == 0) {
            return ret;
        }
        
        int left = 0, right = nums.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                ret[0] = findLeft(nums, target, mid);
                ret[1] = findRight(nums, target, mid);
                return ret;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return ret;
    }
    
    public int findLeft(int[] nums, int target, int end) {
        int left = 0, right = end;
        while (left < right - 1) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target && nums[mid] > nums[mid - 1]) {
                return mid;
            } else if (nums[mid] == target) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        if (nums[left] == target) {
            return left;
        }
        if (nums[right] == target) {
            return right;
        }
        return -1;
    }
    
    public int findRight(int[] nums, int target, int start) {
        int left = start, right = nums.length - 1;
        while (left < right - 1) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target && nums[mid] < nums[mid + 1]) {
                return mid;
            } else if (nums[mid] == target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        if (nums[right] == target) {
            return right;
        }
        if (nums[left] == target) {
            return left;
        }
        return -1;
    }
}
