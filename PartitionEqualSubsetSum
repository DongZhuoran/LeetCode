/**
 * Given a non-empty array containing only positive integers, find if the array 
 * can be partitioned into two subsets such that the sum of elements in both subsets is equal.
 *
 * Note:
 * - Each of the array element will not exceed 100.
 * - The array size will not exceed 200.
 * 
 * Example 1:
 * Input: [1, 5, 11, 5]
 * Output: true
 * Explanation: The array can be partitioned as [1, 5, 5] and [11].
 *
 * Example 2:
 * Input: [1, 2, 3, 5]
 * Output: false
 * Explanation: The array cannot be partitioned into equal sum subsets.
 */
 
 class Solution {
    public boolean canPartition(int[] nums) {
        int sum = 0;
        for (int i = 0; i < nums.length; ++i) {
            sum += nums[i];
        }
        if (sum % 2 != 0) {
            return false;
        } else {
            sum /= 2;
        }
        
        int[][] dp = new int[nums.length][sum + 1];
        for (int i = 0; i < nums.length; ++i) {
            dp[i][0] = 1;
        }
        for (int i = 1; i < nums.length; i++) {
            for (int j = sum; j >= nums[i]; --j) {
                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i]];
            }
        }
        if (dp[nums.length - 1][sum] == 0) {
            return false;
        } else {
            return true;
        }
    }
}
