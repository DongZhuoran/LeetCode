/**
 * You are given two non-empty linked lists representing two non-negative integers. The digits 
 * are stored in reverse order and each of their nodes contain a single digit. Add the two numbers 
 * and return it as a linked list.
 *
 * You may assume the two numbers do not contain any leading zero, except the number 0 itself.
 *
 * Example:
 *
 * Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
 * Output: 7 -> 0 -> 8
 * Explanation: 342 + 465 = 807.
 */
 
 /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode result = new ListNode(0);
        ListNode index = result;
        int sum = 0;
        while (l1 != null || l2 != null) {
            if (l1 != null) {
                sum += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                sum += l2.val;
                l2 = l2.next;
            } 
            index.next = new ListNode(sum % 10);
            sum /= 10;
            index = index.next;
        }
        if (sum != 0) {
            index.next = new ListNode(sum);
        }
        return result.next;
    }
}

/**
 * Complexity Analysis
 * Time complexity : O(max(m,n)). Assume that mm and nn represents the length of l1 and 
 * l2 respectively, the algorithm above iterates at most max(m,n) times.
 * 
 * Space complexity : O(max(m,n)). The length of the new list is at most max(m,n) + 1.
 */
