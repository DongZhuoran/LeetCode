/**
 * According to the Wikipedia's article: "The Game of Life, also known simply as Life, is a cellular
 * automaton devised by the British mathematician John Horton Conway in 1970."
 *
 * Given a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell
 * interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules
 * (taken from the above Wikipedia article):
 *
 * Any live cell with fewer than two live neighbors dies, as if caused by under-population.
 * Any live cell with two or three live neighbors lives on to the next generation.
 * Any live cell with more than three live neighbors dies, as if by over-population..
 * Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
 * Write a function to compute the next state (after one update) of the board given its current state.
 * The next state is created by applying the above rules simultaneously to every cell in the current
 * state, where births and deaths occur simultaneously.
 *
 * Example:
 * Input:
 * [
 *   [0,1,0],
 *   [0,0,1],
 *   [1,1,1],
 *   [0,0,0]
 * ]
 * Output:
 * [
 *   [0,0,0],
 *   [1,0,1],
 *   [0,1,1],
 *   [0,1,0]
 * ]
 *
 * Follow up:
 * 1. Could you solve it in-place? Remember that the board needs to be updated at the same time: You 
 *    cannot update some cells first and then use their updated values to update other cells.
 * 2. In this question, we represent the board using a 2D array. In principle, the board is infinite, 
 *    which would cause problems when the active area encroaches the border of the array. How would you 
 *    address these problems? */
 
// Approach #1: Time: O(mn). Space: O(1).
// Explanation: use 2 to indicate 0->1, 3 to indicate 1->0
class Solution {
    public void gameOfLife(int[][] board) {
        if (board == null || board.length == 0) return;
        
        int m = board.length, n = board[0].length;
        for (int i = 0; i < m; ++ i) {
            for (int j = 0; j < n; ++ j) {
                onGame(board, i, j);
            }
        }
        
        for (int i = 0; i < m; ++ i) {
            for (int j = 0; j < n; ++ j) {
                if (board[i][j] == 2) board[i][j] = 1;
                if (board[i][j] == 3) board[i][j] = 0;
            }
        }
    }
    
    int[] dx = {0, 0, 1, 1, 1, -1, -1, -1};
    int[] dy = {1, -1, -1, 0, 1, -1, 0, 1};
    // 2: 0->1
    // 3: 1->0
    public void onGame(int[][] board, int x, int y) {
        int liveNei = 0;
        for (int i = 0; i < 8; ++ i) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (nx >= 0 && nx < board.length && ny >= 0 && ny < board[0].length) {
                if (board[nx][ny] == 1 || board[nx][ny] == 3) liveNei ++; 
            }
        }
        if (board[x][y] == 0) {
            if (liveNei == 3) board[x][y] = 2;
        } else {
            if (liveNei < 2 || liveNei > 3) board[x][y] = 3;
        }
    }
}
