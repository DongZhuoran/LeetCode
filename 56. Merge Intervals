/**
 * Given a collection of intervals, merge all overlapping intervals.
 *
 * Example 1:
 * Input: [[1,3],[2,6],[8,10],[15,18]]
 * Output: [[1,6],[8,10],[15,18]]
 * Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
 *
 * Example 2:
 * Input: [[1,4],[4,5]]
 * Output: [[1,5]]
 * Explanation: Intervals [1,4] and [4,5] are considerred overlapping.
 */
 
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
 
// Time complexity: O(nlog n), where sort costs O(nlog n).
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        if (intervals.size() == 0) return intervals;
        Collections.sort(intervals, new Comparator<Interval>() {
            @Override
            public int compare(Interval i1, Interval i2) {
                return i1.start - i2.start;
            }
        });
        
        List<Interval> res = new ArrayList<>();
        for (int i = 0; i < intervals.size(); ++i) {
            int k = i + 1;
            Interval cur = intervals.get(i);
            while (k < intervals.size() && cur.end >= intervals.get(k).start) {
                cur.end = Math.max(cur.end, intervals.get(k).end);
                k++;
            }
            res.add(cur);
            i = k - 1;
        }
        return res;
    }
}
