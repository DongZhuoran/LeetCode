/**
 * Given a collection of intervals, merge all overlapping intervals.
 *
 * Example 1:
 * Input: [[1,3],[2,6],[8,10],[15,18]]
 * Output: [[1,6],[8,10],[15,18]]
 * Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
 *
 * Example 2:
 * Input: [[1,4],[4,5]]
 * Output: [[1,5]]
 * Explanation: Intervals [1,4] and [4,5] are considerred overlapping.
 */
 
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
 
// Time complexity: O(nlog n), where sort costs O(nlog n).
class Solution {
    public int[][] merge(int[][] intervals) {
        if (intervals == null || intervals.length < 2) return intervals;
        Arrays.sort(intervals, new Comparator<int[]>() {
           public int compare(int[] i1, int[] i2) {
               return i1[0] - i2[0];
           } 
        });
        
        List<int[]> res = new ArrayList<>();
        for (int i = 0; i < intervals.length; ++ i) {
            int[] cur = intervals[i];
            while (i < intervals.length - 1 && cur[1] >= intervals[i + 1][0]) {
                cur[1] = Math.max(cur[1], intervals[i + 1][1]);
                i ++;
            }
            res.add(cur);
        }
        return res.toArray(new int[res.size()][]);
    }
}
