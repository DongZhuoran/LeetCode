/**
 * The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that 
 * no two queens attack each other.
 * 
 * Given an integer n, return the number of distinct solutions to the n-queens puzzle.
 *
 * Example:
 * Input: 4
 * Output: 2
 * Explanation: There are two distinct solutions to the 4-queens puzzle as shown below.
 * [
 *   [".Q..",  // Solution 1
 *    "...Q",
 *    "Q...",
 *    "..Q."],
 *
 * ["..Q.",  // Solution 2
 *  "Q...",
 *  "...Q",
 *  ".Q.."]
 * ]
 *
 */

// DFS
class Solution {
    public int totalNQueens(int n) {
        if (n == 1) {
            return 1;
        } else if (n < 4) {
            return 0;
        }
        int count = 0;
        for (int i = 0; i < n; i++) {
            int[] queen = new int[n];
            Arrays.fill(queen, -1);
            queen[0] = i;
            count += dfs(queen, 1);
        }
        return count;
    }
    
    public int dfs(int[] queen, int row) {
        if (row >= queen.length) {
            return 1;
        }
        int count = 0;
        for (int j = 0; j < queen.length; j++) {
            if (isAvailable(queen, row, j)) {
                queen[row] = j;
                count += dfs(queen, row + 1);
                queen[row] = -1;
            }
        }
        return count;
    }
    
    public boolean isAvailable(int[] queen, int row, int col) {
        int i = 0;
        while (queen[i] != -1) {
            if (queen[i] == col || queen[i] - col == i - row || queen[i] - col == row - i) {
                return false;
            }
            i++;
        }
        return true;
    }
}
