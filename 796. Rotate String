/**
 * We are given two strings, A and B.
 * A shift on A consists of taking string A and moving the leftmost character to the rightmost position. For example,
 * if A = 'abcde', then it will be 'bcdea' after one shift on A. Return True if and only if A can become B after some 
 * number of shifts on A.
 *
 * Example 1:
 * Input: A = 'abcde', B = 'cdeab'
 * Output: true
 *
 * Example 2:
 * Input: A = 'abcde', B = 'abced'
 * Output: false
 *
 * Note:
 * A and B will have length at most 100.
 */

// HashMap. O(n)???
class Solution {
    public boolean rotateString(String A, String B) {
        if ((A == null && B == null) || (A.length() == 0 && B.length() == 0)) {
            return true;
        } 
        if (A.length() != B.length()) {
            return false;
        }
        
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < A.length(); ++i) {
            map.put(A.substring(0, i), A.substring(i));
        }
        for (int i = 0; i < B.length(); ++i) {
            if (map.containsKey(B.substring(i)) && map.get(B.substring(i)).equals(B.substring(0, i))) {
                return true;
            }
        }
        return false;
    }
}

// Brute force. Time complexity: O(n^2).
class Solution {
    public boolean rotateString(String A, String B) {
        if ((A == null && B == null)|| (A.length() == 0 && B.length() == 0)) {
            return true;
        } 
        if (A.length() != B.length()) {
            return false;
        }
        
        StringBuilder s = new StringBuilder();
        for (int i = 0; i < A.length(); ++i) {
            s.append(A.substring(i));
            s.append(A.substring(0, i));
            if (s.toString().equals(B)) {
                return true;
            } else {
                s.setLength(0);
            }
        }
        return false;
    }
}

// Simple check. Time complexity: O(n^2). Space complexity: O(n).
class Solution {
    public boolean rotateString(String A, String B) {
        return A.length() == B.length() && (A + A).contains(B);
    }
}
