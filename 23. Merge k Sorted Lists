/**
 * Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
 *
 * Example:
 * Input:
 * [
 *   1->4->5,
 *   1->3->4,
 *   2->6
 * ]
 * Output: 1->1->2->3->4->4->5->6
 *
 * Sol: https://leetcode.com/articles/merge-k-sorted-list/
 */
 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 
// Time complexity: O(kn). 
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode res = new ListNode(-1);
        ListNode head = res;
        int count = 0;
        for (ListNode list: lists) {
            if (list != null) {
                count++;
            }
        }
        while (count > 0) {
            ListNode cur = null;
            int min = Integer.MAX_VALUE;
            int index = -1;
            for (int i = 0; i < lists.length; ++i) {
                if (lists[i] != null && lists[i].val <= min) {
                    cur = lists[i];
                    min = cur.val;
                    index = i;
                }
            }
            head.next = cur;
            head = head.next;
            lists[index] = lists[index].next;
            if (lists[index] == null) {
                count--;
            }
        }
        return res.next;
    }
}
