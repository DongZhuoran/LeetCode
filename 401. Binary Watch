/**
 * A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).
 *
 * Each LED represents a zero or one, with the least significant bit on the right.
 *
 * For example, the above binary watch reads "3:25".
 * Given a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch
 * could represent.
 *
 * Example:
 * Input: n = 1
 * Return: ["1:00", "2:00", "4:00", "8:00", "0:01", "0:02", "0:04", "0:08", "0:16", "0:32"]
 *
 * Note:
 * - The order of output does not matter.
 * - The hour must not contain a leading zero, for example "01:00" is not valid, it should be "1:00".
 * - The minute must be consist of two digits and may contain a leading zero, for example "10:2" is not valid, it should be "10:02".
 */

// Approach #1: Backtracking. Time complexity: O(10^N), where N is num.
class Solution {
    public List<String> readBinaryWatch(int num) {
        List<String> res = new ArrayList<>();
        
        if (num == 0) {
            res.add("0:00");
            return res;
        }
        backtracking(num, 0, 0, res);
        return res;
    }
    
    public void backtracking(int num, int index, int cur, List<String> res) {
        if (num == 0) {
            int hour = cur >> 6;
            int minute = cur & 63;
            String str = "" + hour + ":";
            if (minute < 10) {
                str += "0" + minute;
            } else {
                str += minute;
            }
            res.add(str);
            return;
        }
        for (int i = index; i < 10; ++i) {
            if (((cur ^ (1 << i)) >> 6) > 11 || ((cur ^ (1 << i)) & 63) > 59) {
                continue;
            }
            cur ^= (1 << i);
            backtracking(num - 1, i + 1, cur, res);
            cur ^= (1 << i);
        }
    }
}
