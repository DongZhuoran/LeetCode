/**
 * Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) 
 * of elements in this subset satisfies:
 * Si % Sj = 0 or Sj % Si = 0.
 *
 * If there are multiple solutions, return any subset is fine.
 *
 * Example 1:
 * Input: [1,2,3]
 * Output: [1,2] (of course, [1,3] will also be ok)
 * 
 * Example 2:
 * Input: [1,2,4,8]
 * Output: [1,2,4,8] 
 */
 
// Approach #1: DP. Time O(N^2) Space O(N^2).
class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        List<Integer> res = new ArrayList<>();
        Arrays.sort(nums);
        List<Integer>[] dp = new List[nums.length];
        for (int i = 0; i < nums.length; ++ i) {
            dp[i] = new ArrayList<>();
            List<Integer> tmp = null;
            for (int j = 0; j < i; ++ j) {
                if (nums[i] % nums[j] == 0) {
                    if (tmp == null || tmp.size() < dp[j].size()) {
                        tmp = dp[j];
                    }
                }
            }
            if (tmp != null && tmp.size() + 1 > dp[i].size()) {
                dp[i].clear();
                dp[i].addAll(tmp);
            }
            dp[i].add(nums[i]);
            if (dp[i].size() > res.size()) {
                res.clear();
                res.addAll(dp[i]);
            }
        }
        return res;
    }
}

// Approach #2: DP. Time O(N^2) Space O(N).
class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        List<Integer> res = new ArrayList<>();
        if (nums.length == 0) return res;
        int[] dp = new int[nums.length];
        int[] parent = new int[nums.length];
        int maxLen = 0;
        int maxIndex = -1;
        Arrays.fill(dp, 1);
        Arrays.fill(parent, -1);
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; ++ i) {
            for (int j = 0; j < i; ++ j) {
                if (nums[i] % nums[j] == 0 && dp[i] < dp[j] + 1) {
                    dp[i] = dp[j] + 1;
                    parent[i] = j;
                }
            }
            if (dp[i] > maxLen) {
                maxLen = dp[i];
                maxIndex = i;
            }
        }
        int curIndex = maxIndex;
        while (curIndex != -1) {
            res.add(nums[curIndex]);
            curIndex = parent[curIndex];
        }
        return res;
    }
}
