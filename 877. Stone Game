/**
 * Alex and Lee play a game with piles of stones.  There are an even number of piles arranged in a row, and 
 * each pile has a positive integer number of stones piles[i].
 *
 * The objective of the game is to end with the most stones.  The total number of stones is odd, so there are no ties.
 *
 * Alex and Lee take turns, with Alex starting first.  Each turn, a player takes the entire pile of stones from 
 * either the beginning or the end of the row.  This continues until there are no more piles left, at which point 
 * the person with the most stones wins.
 *
 * Assuming Alex and Lee play optimally, return True if and only if Alex wins the game.
 *
 * Example 1:
 * Input: [5,3,4,5]
 * Output: true
 * Explanation: 
 * Alex starts first, and can only take the first 5 or the last 5.
 * Say he takes the first 5, so that the row becomes [3, 4, 5].
 * If Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.
 * If Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.
 * This demonstrated that taking the first 5 was a winning move for Alex, so we return true.
 *
 * Note:
 *     2 <= piles.length <= 500
 *     piles.length is even.
 *     1 <= piles[i] <= 500
 *     sum(piles) is odd.
 */

// 2D dp. Time complexity: O(n^2).
class Solution {
    public boolean stoneGame(int[] piles) {
        int len = piles.length;
        
        int[][] dp = new int[len][len];
        for (int k = 1; k < len; ++k) {
            for (int i = 0; i + k < len; ++i) {
                if (k % 2 == 1) {  // Alex's turn.
                    dp[i][i + k] = Math.max(piles[i] + dp[i + 1][i + k], piles[i + k] + dp[i][i + k - 1]);
                } else {  // Lee's turn.
                    dp[i][i + k] = Math.min(-piles[i] + dp[i + 1][i + k], -piles[i + k] + dp[i][i + k - 1]);
                }
            }
        }
        return dp[0][len - 1] > 0;
    }
}

// Brute force + hashmap. [Time limit exceeded]
class Solution {
    public boolean stoneGame(int[] piles) {
        Map<String, List<Integer>> map = new HashMap<>();
        return alexDecision(piles, 0, piles.length - 1, map);
    }
    
    private boolean alexDecision(int[] piles, int l, int r, Map<String, List<Integer>> map) {
        int alex_points = 0;
        int lee_points = 0;
        int[] left = lee(piles, l + 1, r, map);
        int[] right = lee(piles, l, r - 1, map);
        return left[0] + piles[l] > left[1] || right[0] + piles[r] > right[1];
    }
    
    private int[] alex(int[] piles, int l, int r, Map<String, List<Integer>> map) {
        if (l >= r) {
            return new int[] {0, 0};
        }
        String key = l + "_" + r;
        if (map.containsKey(key)) {
            return new int[] {map.get(key).get(0), map.get(key).get(1)};
        }
        int alex_points = 0;
        int lee_points = 0;
        int[] left = lee(piles, l + 1, r, map);
        int[] right = lee(piles, l, r - 1, map);
        if (left[0] + piles[l] > right[0] + piles[r]) {
            alex_points = left[0] + piles[l];
            lee_points = left[1];
        } else if (left[0] + piles[l] == right[0] + piles[r]) {
            if (left[1] < right[1]) {
                alex_points = left[0] + piles[l];
                lee_points = left[1];
            } else {
                alex_points = right[0] + piles[r];
                lee_points = right[1];
            }
        } else {
            alex_points = right[0] + piles[r];
            lee_points = right[1];
        }
        map.put(key, new ArrayList<>(Arrays.asList(alex_points, lee_points)));
        return new int[] {alex_points, lee_points};
    }
    
    private int[] lee(int[] piles, int l, int r, Map<String, List<Integer>> map) {
        if (l >= r) {
            return new int[] {0, 0};
        }
        String key = l + "_" + r;
        if (map.containsKey(key)) {
            return new int[] {map.get(key).get(0), map.get(key).get(1)};
        }
        int alex_points = 0;
        int lee_points = 0;
        int[] left = alex(piles, l + 1, r, map);
        int[] right = alex(piles, l, r - 1, map);
        if (left[1] + piles[l] > right[1] + piles[r]) {
            lee_points = left[1] + piles[l];
            alex_points = left[0];
        } else if (left[1] + piles[l] == right[1] + piles[r]) {
            if (left[0] < right[0]) {
                lee_points = left[1] + piles[l];
                alex_points = left[0];
            } else {
                lee_points = right[1] + piles[r];
                alex_points = right[0];
            }
        } else {
            lee_points = right[1] + piles[r];
            alex_points = right[0];
        }
        map.put(key, new ArrayList<>(Arrays.asList(alex_points, lee_points)));
        return new int[] {alex_points, lee_points};
    }
}
