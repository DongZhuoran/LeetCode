/**
 * Alex and Lee play a game with piles of stones.  There are an even number of piles arranged in a row, and 
 * each pile has a positive integer number of stones piles[i].
 *
 * The objective of the game is to end with the most stones.  The total number of stones is odd, so there are no ties.
 *
 * Alex and Lee take turns, with Alex starting first.  Each turn, a player takes the entire pile of stones from 
 * either the beginning or the end of the row.  This continues until there are no more piles left, at which point 
 * the person with the most stones wins.
 *
 * Assuming Alex and Lee play optimally, return True if and only if Alex wins the game.
 *
 * Example 1:
 * Input: [5,3,4,5]
 * Output: true
 * Explanation: 
 * Alex starts first, and can only take the first 5 or the last 5.
 * Say he takes the first 5, so that the row becomes [3, 4, 5].
 * If Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.
 * If Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.
 * This demonstrated that taking the first 5 was a winning move for Alex, so we return true.
 *
 * Note:
 *     2 <= piles.length <= 500
 *     piles.length is even.
 *     1 <= piles[i] <= 500
 *     sum(piles) is odd.
 */

// 2D dp. Time complexity: O(n^2).
class Solution {
    public boolean stoneGame(int[] piles) {
        int N = piles.length;
        int[][] dp = new int[N][N];
        
        for (int i = 0; i < N; ++i) dp[i][i] = piles[i];
        for (int size = 1; size < N; ++size) {
            for (int i = 0; i < N - size; ++i) {
                int j = i + size;
                dp[i][j] = Math.max(piles[i] - dp[i + 1][j], piles[j] - dp[i][j - 1]);
            }
        }
        return dp[0][N - 1] > 0;
    }
}

// Minimax with memorization. Time complexity: O(n^2).
class Solution {
    public boolean stoneGame(int[] piles) {
        Map<String, Integer> map = new HashMap<>();
        return score(piles, 0, piles.length - 1, map) > 0;
    }
    
    private int score(int[] piles, int l, int r, Map<String, Integer> map) {
        if (l == r) {
            return piles[l];
        }
        String key = l + "," + r;
        if (map.containsKey(key)) {
            return map.get(key);
        }
        int value =  Math.max(piles[l] - score(piles, l + 1, r, map),
                       piles[r] - score(piles, l, r - 1, map));
        map.put(key, value);
        return value;
    }
}

// Minimax O(2^n). [Time limit exceeded]
class Solution {
    public boolean stoneGame(int[] piles) {
        return score(piles, 0, piles.length - 1) > 0;
    }
    
    private int score(int[] piles, int l, int r) {
        if (l == r) {
            return piles[l];
        }
        return Math.max(piles[l] - score(piles, l + 1, r),
                       piles[r] - score(piles, l, r - 1));
    }
}
