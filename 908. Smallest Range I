/**
 * Given an array A of integers, for each integer A[i] we may choose any x with -K <= x <= K, and add x to A[i].
 * After this process, we have some array B.
 * Return the smallest possible difference between the maximum value of B and the minimum value of B.
 *
 * Example 1:
 * Input: A = [1], K = 0
 * Output: 0
 * Explanation: B = [1]
 *
 * Example 2:
 * Input: A = [0,10], K = 2
 * Output: 6
 * Explanation: B = [2,8]
 *
 * Example 3:
 * Input: A = [1,3,6], K = 3
 * Output: 0
 * Explanation: B = [3,3,3] or B = [4,4,4]
 *
 * Note:
 *   1 <= A.length <= 10000
 *   0 <= A[i] <= 10000
 *   0 <= K <= 10000
 */
 
// Approach #1: greedy. Time complexity: O(n).
class Solution {
    public int smallestRangeI(int[] A, int K) {
        if (A == null || A.length == 0) return -1;
        
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        for (int n: A) {
            max = Math.max(max, n);
            min = Math.min(min, n);
        }
        
        if (K >= (max - min + 1) / 2) {
            return 0;
        } else {
            return max - min - 2 * K;
        }
    }
}
