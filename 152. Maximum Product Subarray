/**
 * Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has 
 * the largest product.
 *
 * Example 1:
 * Input: [2,3,-2,4]
 * Output: 6
 * Explanation: [2,3] has the largest product 6.
 *
 * Example 2:
 * Input: [-2,0,-1]
 * Output: 0
 * Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
 */

// The maximum value will be in nums[i], min and max. Update min and max every time.
class Solution {
    public int maxProduct(int[] nums) {
        if (nums.length == 0) return 0;
        
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        int min = nums[0];
        int max = nums[0];
        for (int i = 1; i < dp.length; ++i) {
            int cur = nums[i];
            if (nums[i] > 0) {
                min = cur < cur * min ? cur : cur * min;
                max = cur > cur * max ? cur : cur * max;
            } else if (nums[i] < 0) {
                int temp = min;
                min = cur < cur * max ? cur : cur * max;
                max = cur > cur * temp ? cur : cur * temp;
            } else {
                min = 0;
                max = 0;
            }
            dp[i] = Math.max(dp[i - 1], max);
        }
        
        return dp[nums.length - 1];
    }
}
