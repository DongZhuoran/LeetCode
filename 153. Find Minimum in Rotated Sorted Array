/**
 * Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
 * (i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).
 * Find the minimum element.
 * You may assume no duplicate exists in the array.
 *
 * Example 1:
 * Input: [3,4,5,1,2] 
 * Output: 1
 *
 * Example 2:
 * Input: [4,5,6,7,0,1,2]
 * Output: 0
 */
 
class Solution {
    // Find the smallest number in the array
    public int findMin(int[] nums) {
        int left = 0, right = nums.length - 1;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] > nums[right]) {
                // The left side is sorted.
                left = mid + 1;
            } else {
                // The right side is sorted.
                right = mid;
            }
        }
        return nums[left];
    }
    
    // Find the largest number in the array, return the next one to its right
    public int findMin(int[] nums) {
        int left = 0, right = nums.length - 1;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] > nums[left]) {
                // The left side is sorted.
                left = mid;
            } else {
                // The right side is sorted.
                right = mid - 1;
            }
        }
        if (left + 1 < nums.length) {
            return nums[left + 1];
        }
        return nums[left];
    }
}
