/**
 * Given a binary tree
 *
 * struct TreeLinkNode {
 *   TreeLinkNode *left;
 *   TreeLinkNode *right;
 *   TreeLinkNode *next;
 * }
 * Populate each next pointer to point to its next right node. If there is no next right 
 * node, the next pointer should be set to NULL.
 *
 * Initially, all next pointers are set to NULL.
 * 
 * Note:
 * - You may only use constant extra space.
 * - Recursive approach is fine, implicit stack space does not count as extra space for this problem.
 * Example:
 * Given the following binary tree,
 *
 *     1
 *    /  \
 *   2    3
 *  / \    \
 * 4   5    7
 * After calling your function, the tree should look like:
 *
 *      1 -> NULL
 *     /  \
 *    2 -> 3 -> NULL
 *   / \    \
 *  4-> 5 -> 7 -> NULL
 */
 
/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}

    public Node(int _val,Node _left,Node _right,Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

// Approach #1: Queue. Space complexity: O(n).
public class Solution {
    public Node connect(Node root) {
        if (root == null) {
            return;
        }
        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; ++i) {
                Node curNode = queue.poll();
                if (i + 1 < size) {
                    curNode.next = queue.peek();
                }
                if (curNode.left != null) {
                    queue.offer(curNode.left);
                }
                if (curNode.right != null) {
                    queue.offer(curNode.right);
                }
            }
        }
        return root;
    }
}

// Approach #2: BFS. Space complexity: O(1).
class Solution {
    public Node connect(Node root) {
        if (root == null) return root;
        
        Node dummy = new Node();
        Node itr = null;
        Node cur = root;
        while (itr != dummy) {
            if (cur == null) cur = dummy.next;
            itr = dummy;
            while (cur != null) {
                if (cur.left != null) {
                    itr.next = cur.left;
                    itr = itr.next;
                }
                if (cur.right != null) {
                    itr.next = cur.right;
                    itr = itr.next;
                }
                cur = cur.next;
            }
        }
        return root;
    }
}
