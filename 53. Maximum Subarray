/**
 * Given an integer array nums, find the contiguous subarray (containing at least one number) which 
 * has the largest sum and return its sum.
 *
 * Example:
 * Input: [-2,1,-3,4,-1,2,1,-5,4],
 * Output: 6
 * Explanation: [4,-1,2,1] has the largest sum = 6.
 *
 * Follow up:
 * If you have figured out the O(n) solution, try coding another solution using the divide and conquer 
 * approach, which is more subtle.
 */

// Dynamic programming. Time complexity: O(n).
class Solution {
    public int maxSubArray(int[] nums) {
        int[] n = nums;
        int max = n[0];
        for (int i = 1; i < n.length; ++i) {
            if (n[i - 1] > 0) {
                n[i] += n[i - 1];
            }
            max = Math.max(max, n[i]);
        }
        return max;
    }
}

// Divide and conquer. Time complexity: O(n).
class Solution {
    public int maxSubArray(int[] nums) {
        Node res = dc(nums, 0, nums.length - 1);
        return Math.max(res.m, Math.max(res.l, res.r));
    }
    
    private Node dc(int[] nums, int start, int end) {
        if (start == end) {
            return new Node(nums[start], nums[start], nums[start], nums[start]);
        }
        int mid = (start + end) / 2;
        Node left = dc(nums, start, mid);
        Node right = dc(nums, mid + 1, end);
        int l = Math.max(left.l, left.s + right.l);
        int r = Math.max(right.r, left.r + right.s);
        int m = Math.max(left.r + right.l, Math.max(left.m, right.m));
        int s = left.s + right.s;
        return new Node(l, r, m, s);
    }
    
    class Node {
        int l, r, m, s;
        public Node (int l, int r, int m, int s) {
            this.l = l;
            this.r = r;
            this.m = m;
            this.s = s;
        }
    }
}

// Brute force. Time complexity: O(n^2).
class Solution {
    public int maxSubArray(int[] nums) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < nums.length; ++i) {
            int sum = 0;
            for (int j = i; j < nums.length; ++j) {
                sum += nums[j];
                max = Math.max(max, sum);
            }
        }
        return max;
    }
}
