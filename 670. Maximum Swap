/**
 * Given a non-negative integer, you could swap two digits at most once to get the maximum 
 * valued number. Return the maximum valued number you could get.
 *
 * Example 1:
 * Input: 2736
 * Output: 7236
 * Explanation: Swap the number 2 and the number 7.
 * 
 * Example 2:
 * Input: 9973
 * Output: 9973
 * Explanation: No swap.
 * 
 * Note:
 * The given number is in the range [0, 108] */
 
// Approach #1: Greedy. Time: O(n). Space: O(1).
class Solution {
    public int maximumSwap(int num) {
        char[] arr = String.valueOf(num).toCharArray();
        int[] last = new int[10];
        for (int i = 0; i < arr.length; ++ i)
            last[arr[i] - '0'] = i;
        
        for (int i = 0; i < arr.length; ++ i) {
            for (int j = 9; j > arr[i] - '0'; -- j) {
                if (last[j] > i) {
                    char tmp = arr[last[j]];
                    arr[last[j]] = arr[i];
                    arr[i] = tmp;
                    return Integer.valueOf(new String(arr));
                }
            }
        }
        return num;
    }
}
