/**
 * For some fixed N, an array A is beautiful if it is a permutation of the integers 1, 2, ..., N, such that:
 * For every i < j, there is no k with i < k < j such that A[k] * 2 = A[i] + A[j].
 * Given N, return any beautiful array A.  (It is guaranteed that one exists.)
 *
 * Example 1:
 * Input: 4
 * Output: [2,1,4,3]
 *
 * Example 2:
 * Input: 5
 * Output: [3,1,2,5,4]
 *
 * Note:
 * 1 <= N <= 1000
 *
 * Reference:
 * https://www.youtube.com/watch?v=9L6bPGDfyqo
 */
 
// Time complexity: O(nlog n).
class Solution {
    public int[] beautifulArray(int N) {
        int[] res = {1};
        while (res.length < N) {
            int[] temp = new int[res.length * 2];
            int i = 0;
            // Odd
            for (int n: res) {
                temp[i] = n * 2 - 1;
                i++;
            }
            // Even
            for (int n: res) {
                temp[i] = n * 2;
                i++;
            }
            res = temp;
        }
        int[] temp = res;
        for (int i = 0, j = 0; i < temp.length && j < N; ++i) {
            if (temp[i] <= N) {
                res[j] = temp[i];
                j++;
            }
        }
        return Arrays.copyOf(res, N);
    }
}
