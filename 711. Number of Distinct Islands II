/**
 * Given a non-empty 2D array grid of 0's and 1's, an island is a group of 
 * 1's (representing land) connected 4-directionally (horizontal or vertical.) 
 * You may assume all four edges of the grid are surrounded by water.
 *
 * Count the number of distinct islands. An island is considered to be the same 
 * as another if they have the same shape, or have the same shape after rotation 
 * (90, 180, or 270 degrees only) or reflection (left/right direction or up/down direction).
 * 
 * Example 1:
 * 11000
 * 10000
 * 00001
 * 00011
 * Given the above grid map, return 1. 
 *
 * Notice that:
 * 11
 * 1
 * and
 *  1
 * 11
 * are considered same island shapes. Because if we make a 180 degrees clockwise rotation 
 * on the first island, then two islands will have the same shapes.
 * 
 * Example 2:
 * 11100
 * 10001
 * 01001
 * 01110
 * Given the above grid map, return 2.
 * 
 * Here are the two distinct islands:
 * 111
 * 1
 * and
 * 1
 * 1
 * 
 * Notice that:
 * 111
 * 1
 * and
 * 1
 * 111
 * are considered same island shapes. Because if we flip the first array in the up/down 
 * direction, then they have the same shapes.
 * 
 * Note: The length of each dimension in the given grid does not exceed 50.
 */
 
 /**
  * Refer to: 
  * - https://blog.csdn.net/magicbean2/article/details/79282937
  * - http://www.nowtoshare.com/en/Article/Index/70690
  */
class Solution {
    int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    
    public int numDistinctIslands2(int[][] grid) {
        int[][] g = grid;
        Set<String> islands = new HashSet<>();
        for (int i = 0; i < grid.length; ++i) {
            for (int j = 0; j < grid[0].length; ++j) {
                List<Integer> island = new ArrayList<>();
                dfs(g, i, j, island);
                islands.add(normalize(island, grid.length, grid[0].length));
            }
        }
        return islands.size();
    }
    
    public void dfs(int[][] g, int x, int y, List<Integer> island) {
        if (x < 0 || x == g.length || y < 0 || y < g[0].length || g[x][y] == 0) {
            return;
        }
        g[x][y] = 0;
        island.add(x * g[0].length + y);
        for (int[] dir: dirs) {
            dfs(g, x + dir[0], y + dir[1], island);
        }
    }
    
    public String normalize(List<Integer> island, int m, int n) {
        int[][] islands = new int[8][island.length];
        String ret = "";
        int[] mx = new int[island.length], my = new int[island.length];
        Arrays.fill(mx, Integer.MAX_VALUE);
        Arrays.fill(my, Integer.MAX_VALUE);
        for (int i = 0; i < island.length; ++i) {
            int x = island[i] / n, y = island[i] % n;
            islands[0] = x * n + y;
            islands[1] = x * n - y;
            islands[2] = -x * n + y;
            islands[3] = -x * n - y;
            islands[4] = y * n + x;
            islands[5] = y * n - x;
            islands[6] = -y * n + x;
            islands[7] = -y * n - x;
            mx[0] = Math.min(mx[0], x), my[0] = Math.min(my[0], y);
            mx[1] = Math.min(mx[1], x), my[1] = Math.min(my[1], -y);
            mx[2] = Math.min(mx[2], -x), my[2] = Math.min(my[2], y);
            mx[3] = Math.min(mx[3], -x), my[3] = Math.min(my[3], -y);
            mx[4] = Math.min(mx[4], y), my[4] = Math.min(my[4], x);
            mx[5] = Math.min(mx[5], y), my[5] = Math.min(my[5], -x);
            mx[6] = Math.min(mx[6], -y), my[6] = Math.min(my[6], x);
            mx[7] = Math.min(mx[7], -y), my[7] = Math.min(my[7], -x);
        }
        for (int i = 0; i < 8; ++i) {
            for (int j = 0; j < island.length; ++j) {
                islands[i][j] -= (mx[i] * n + my[i]);
            }
            Arrays.sort(islands[i]);
            if (ret.compareTo(Arrays.toString(islands[i])) < 0) {
                ret = Arrays.toString(island[i]);
            }
        }
        return ret;
    }
}
