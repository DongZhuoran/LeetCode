/**
 * A 2d grid map of m rows and n columns is initially filled with water. We may 
 * perform an addLand operation which turns the water at position (row, col) into 
 * a land. Given a list of positions to operate, count the number of islands after 
 * each addLand operation. An island is surrounded by water and is formed by connecting 
 * adjacent lands horizontally or vertically. You may assume all four edges of the 
 * grid are all surrounded by water.
 *
 * Example:
 * Given m = 3, n = 3, positions = [[0,0], [0,1], [1,2], [2,1]].
 * Initially, the 2d grid grid is filled with water. (Assume 0 represents water and 1 represents land).
 * 0 0 0
 * 0 0 0
 * 0 0 0
 * 
 * Operation #1: addLand(0, 0) turns the water at grid[0][0] into a land.
 * 1 0 0
 * 0 0 0   Number of islands = 1
 * 0 0 0
 * 
 * Operation #2: addLand(0, 1) turns the water at grid[0][1] into a land.
 * 1 1 0
 * 0 0 0   Number of islands = 1
 * 0 0 0
 * 
 * Operation #3: addLand(1, 2) turns the water at grid[1][2] into a land.
 * 1 1 0
 * 0 0 1   Number of islands = 2
 * 0 0 0
 * 
 * Operation #4: addLand(2, 1) turns the water at grid[2][1] into a land.
 * 1 1 0
 * 0 0 1   Number of islands = 3
 * 0 1 0
 * 
 * We return the result as an array: [1, 1, 2, 3]
 *
 * Challenge:
 * - Can you do it in time complexity O(k log mn), where k is the length of the positions?
 */
 
/**
 * Using disjoint set data structure
 * Refer to: 
 * - http://www.cnblogs.com/grandyang/p/5190419.html
 * - https://www.geeksforgeeks.org/disjoint-set-data-structures-java-implementation/
 */
class Solution {
    public List<Integer> numIslands2(int m, int n, int[][] positions) {
        List<Integer> ret = new ArrayList<>();
        int[] parents = new int[m * n];
        Arrays.fill(parents, -1);
        int count = 0;
        int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        
        for (int[] position: positions) {
            count++;
            int id = n * position[0] + position[1];
            parents[id] = id;
            for (int[] dir: dirs) {
                int x = position[0] + dir[0], y = position[y] + dir[y];
                int cur_id = n * x + y;
                if (x < 0 || x == m || y < 0 || y == n || parents[cur_id] == -1) {
                    continue;
                }
                int p = find(parents, cur_id), q = find(parents, id);
                if (p != q) {
                    parents[p] = q;
                    count--;
                }
            }
            ret.add(count);
        }
        return ret;
    }
    
    public int find(int[] parents, int i) {
        if (parents[i] == i) {
            return i;
        } else {
            parents[i] = find(parents[i]);
        }
        return parents[i];
    }
}
