/**
 * Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest 
 * element in the matrix.
 * 
 * Note that it is the kth smallest element in the sorted order, not the kth distinct element.
 *
 * Example:
 * matrix = [
 *    [ 1,  5,  9],
 *    [10, 11, 13],
 *    [12, 13, 15]
 * ],
 * k = 8,
 *
 * return 13.
 *
 * Note: 
 * You may assume k is always valid, 1 ≤ k ≤ n2.
 *
 * Rederence
 * https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/discuss/85173/Share-my-thoughts-and-Clean-Java-Code
 */

// Approach #1: min heap. Time complexity: O(n + (k - 1)logn).
class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int n = matrix.length;
        PriorityQueue<Tuple> pq = new PriorityQueue<>();
        for (int j = 0; j < n; ++j) {
            pq.add(new Tuple(0, j, matrix[0][j]));
        }
        for (int i = 0; i < k - 1; ++i) {
            Tuple temp = pq.poll();
            // Easy to be ignored.
            if (temp.x == n - 1) continue;
            pq.add(new Tuple(temp.x + 1, temp.y, matrix[temp.x + 1][temp.y]));
        }
        return pq.peek().val;
    }
    
    class Tuple implements Comparable<Tuple> {
        int x, y, val;
        public Tuple(int x, int y, int val) {
            this.x = x;
            this.y = y;
            this.val = val;
        }
        
        @Override
        public int compareTo(Tuple t) {
            return this.val - t.val;
        }
    }
}

// Approach #2: binary search. Time complexity: O(n^2 logn). (?)
class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int n = matrix.length;
        int lo = matrix[0][0], hi = matrix[n - 1][n - 1];
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            int count = 0, j = n - 1;
            for (int i = 0; i < n; ++i) {
                while (j >= 0 && matrix[i][j] > mid) j--;
                count += j + 1;
            }
            if (count < k) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return lo;
    }
}
