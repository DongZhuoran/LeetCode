/**
 * Serialization is the process of converting a data structure or object into a sequence 
 * of bits so that it can be stored in a file or memory buffer, or transmitted across a 
 * network connection link to be reconstructed later in the same or another computer environment.
 *
 * Design an algorithm to serialize and deserialize a binary tree. There is no restriction 
 * on how your serialization/deserialization algorithm should work. You just need to ensure 
 * that a binary tree can be serialized to a string and this string can be deserialized to 
 * the original tree structure.
 *
 * Example: 
 *
 * You may serialize the following tree:
 *
 *     1
 *    / \
 *   2   3
 *      / \
 *     4   5
 *
 * as "[1,2,3,null,null,4,5]"
 * Clarification: The above format is the same as how LeetCode serializes a binary tree. You 
 * do not necessarily need to follow this format, so please be creative and come up with 
 * different approaches yourself.
 * 
 * Note: Do not use class member/global/static variables to store states. Your serialize and 
 * deserialize algorithms should be stateless.
 */
 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
// BFS. Time complexity: O(n).
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while (!q.isEmpty()) {
            TreeNode curNode = q.poll();
            if (curNode == null) {
                sb.append("n" + ",");
            } else {
                sb.append(curNode.val + ",");
                q.offer(curNode.left);
                q.offer(curNode.right);
            }
        }
        return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        String[] normData = data.split(",");
        Queue<TreeNode> queue = new LinkedList<>();
        if (normData[0].equals("n")) {
            return null;
        }
        TreeNode root = new TreeNode(Integer.valueOf(normData[0]));
        queue.offer(root);
        for (int i = 1; i < normData.length; ++i) {
            TreeNode curNode = queue.poll();
            if (!normData[i].equals("n")) {
                TreeNode left = new TreeNode(Integer.valueOf(normData[i]));
                curNode.left = left;
                queue.offer(left);
            }
            if (!normData[++i].equals("n")) {
                TreeNode right = new TreeNode(Integer.valueOf(normData[i]));
                curNode.right = right;
                queue.offer(right);
            }
        }
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
