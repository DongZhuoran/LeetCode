/**
 * Design and implement a data structure for Least Recently Used (LRU) cache. It should support 
 * the following operations: get and put.
 *
 * get(key) - Get the value (will always be positive) of the key if the key exists in the cache, 
 *            otherwise return -1.
 * put(key, value) - Set or insert the value if the key is not already present. When the cache 
 *                   reached its capacity, it should invalidate the least recently used item before 
 *                   inserting a new item.
 *
 * Follow up:
 * Could you do both operations in O(1) time complexity?
 *
 * Example:
 * LRUCache cache = new LRUCache( 2 /* capacity */ );
 * 
 * cache.put(1, 1);
 * cache.put(2, 2);
 * cache.get(1);       // returns 1
 * cache.put(3, 3);    // evicts key 2
 * cache.get(2);       // returns -1 (not found)
 * cache.put(4, 4);    // evicts key 1
 * cache.get(1);       // returns -1 (not found)
 * cache.get(3);       // returns 3
 * cache.get(4);       // returns 4
 */
 
// Approach #1: LinkedHashMap
class LRUCache extends LinkedHashMap<Integer, Integer> {
    int capacity;

    public LRUCache(int capacity) {
        super(capacity, 0.75F, true);
        this.capacity = capacity;
    }
    
    public int get(int key) {
        return super.getOrDefault(key, -1);
    }
    
    public void put(int key, int value) {
        super.put(key, value);
    }
    
    @Override
    protected boolean removeEldestEntry(Map.Entry<Integer, Integer> eldest) {
        return size() > capacity;
    }
}

// Approach #2: HashMap + DoublyLinkedList
class LRUCache {
    private int capacity;
    
    private Node head, tail;
    
    private Map<Integer, Node> map;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        map = new HashMap<>();
    }
    
    public int get(int key) {
        if (map.containsKey(key)) {
            Node cur = map.get(key);
            moveToHead(cur);
            return cur.val;
        } else {
            return -1;
        }
    }
    
    public void put(int key, int value) {
        Node cur;
        if (map.containsKey(key)) {
            cur = map.get(key);
            cur.val = value;
        } else {
            cur = new Node(key, value);
            if (map.size() == capacity) {
                map.remove(tail.key);
                tail = tail.prev;
                if (tail != null) tail.next = null;
                else head = null;
            }
            map.put(key, cur);
        }
        moveToHead(cur);
    }
    
    private void moveToHead(Node node) {
        if (head == null) {
            head = tail = node;
        } else if (head != node) {
            if (node != tail && node.prev != null) {
                node.prev.next = node.next;
                node.next.prev = node.prev;
            } else if (node.prev != null) {
                tail = tail.prev;
                tail.next = null;
            }
            head.prev = node;
            node.next = head;
            node.prev = null;
            head = node;
        }
    }
    
    class Node {
        int key;
        int val;
        Node prev, next;
        public Node(int k, int v) {
            key = k;
            val = v;
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
