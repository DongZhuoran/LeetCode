/**
 * Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find 
 * the minimum number of conference rooms required.
 *
 * For example,
 * Given [[0, 30],[5, 10],[15, 20]],
 * return 2.
 */
 
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */

// Approach #1: sort and PriorityQueue. Time complexity: O(nlog n).
class Solution {
    public int minMeetingRooms(Interval[] intervals) {
        int n = intervals.length;
        if (n == 0) return 0;
        
        Arrays.sort(intervals, new Comparator<Interval>() {
            @Override
            public int compare(Interval i1, Interval i2) {
                return i1.end - i2.end;
            }
        });
        
        PriorityQueue<Integer> rooms = new PriorityQueue<>();
        for (int interval: intervals) {
            if (rooms.size() == 0) rooms.add(interval.end);
            else {
                if (rooms.peek() <= interval.start) {
                    rooms.poll();
                }
                rooms.add(interval.end);
            }
        }
        return rooms.size();
    }
}
