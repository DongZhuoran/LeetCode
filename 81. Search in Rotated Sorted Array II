/**
 * Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
 * (i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).
 * You are given a target value to search. If found in the array return true, otherwise return false.
 *
 * Example 1:
 * Input: nums = [2,5,6,0,0,1,2], target = 0
 * Output: true
 * 
 * Example 2:
 * Input: nums = [2,5,6,0,0,1,2], target = 3
 * Output: false
 * 
 * Follow up:
 * - This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.
 * - Would this affect the run-time complexity? How and why?
 */
 
 // Time complexity: O(log n)
 class Solution {
    public boolean search(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return false;
        }
        int left = 0, right = nums.length - 1;
        int pivot = findPivot(nums, left, right);
        while (left <= right) {
            int mid = left + (right - left) / 2;
            int realMid = (mid + pivot) % nums.length;
            if (nums[realMid] == target) {
                return true;
            } else if (nums[realMid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return false;
    }
    
    public int findPivot(int[] nums, int start, int end) {
        if (start > end) {
            return 0;
        }
        int mid = start + (end - start) / 2;
        if (mid > start && nums[mid] < nums[mid - 1]) {
            return mid;
        } else if (mid < end && nums[mid] > nums[mid + 1]) {
            return mid + 1;
        } else {
            return Math.max(findPivot(nums, start, mid - 1), findPivot(nums, mid + 1, end));
        }
    }
}
