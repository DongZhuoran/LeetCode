/**
 * Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants 
 * represented by strings.
 *
 * You need to help them find out their common interest with the least list index sum. If there is a choice tie between 
 * answers, output all of them with no order requirement. You could assume there always exists an answer.
 *
 * Example 1:
 * Input:
 * ["Shogun", "Tapioca Express", "Burger King", "KFC"]
 * ["Piatti", "The Grill at Torrey Pines", "Hungry Hunter Steakhouse", "Shogun"]
 * Output: ["Shogun"]
 * Explanation: The only restaurant they both like is "Shogun".
 *
 * Example 2:
 * Input:
 * ["Shogun", "Tapioca Express", "Burger King", "KFC"]
 * ["KFC", "Shogun", "Burger King"]
 * Output: ["Shogun"]
 * Explanation: The restaurant they both like and have the least index sum is "Shogun" with index sum 1 (0+1).
 *
 * Note:
 * The length of both lists will be in the range of [1, 1000].
 * The length of strings in both lists will be in the range of [1, 30].
 * The index is starting from 0 to the list length minus 1.
 * No duplicates in both lists.
 */
 
class Solution {
    public String[] findRestaurant(String[] list1, String[] list2) {
        Map<String, Integer> seen = new HashMap<>();
        Map<Integer, List<String>> map = new HashMap<>();
        for (int i = 0; i < list1.length; ++i) {
            seen.put(list1[i], i);
        }
        
        int indexMin = Integer.MAX_VALUE;
        for (int i = 0; i < list2.length; ++i) {
            String s = list2[i];
            if (seen.containsKey(s)) {
                int indexSum = seen.get(s) + i;
                indexMin = Math.min(indexMin, indexSum);
                if (map.containsKey(indexSum)) {
                    map.get(indexSum).add(s);
                } else {
                    List<String> nList = new ArrayList<>();
                    nList.add(s);
                    map.put(indexSum, nList);
                }
            }
        }
        
        int n = map.get(indexMin).size();
        String[] res = new String[n];
        for (int i = 0; i < n; ++i) {
            res[i] = map.get(indexMin).get(i);
        }
        return res;
    }
}
