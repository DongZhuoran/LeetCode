/**
 * From https://leetcode.com/problems/longest-increasing-path-in-a-matrix/
 * 
 * Given an integer matrix, find the length of the longest increasing path.
 *
 * From each cell, you can either move to four directions: left, right, up or down. You may 
 * NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).
 *
 * Example 1:
 * Input: nums = 
 * [
 *   [9,9,4],
 *   [6,6,8],
 *   [2,1,1]
 * ] 
 * Output: 4 
 * Explanation: The longest increasing path is [1, 2, 6, 9].
 * 
 * Example 2:
 * Input: nums = 
 * [
 *   [3,4,5],
 *   [3,2,6],
 *   [2,2,1]
 * ] 
 * Output: 4 
 * Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed. */
 
// Approach #1: DFS + memorization. Time/Space complexity: O(mn).
class Solution {
    int[] dx = {1, -1, 0, 0};
    int[] dy = {0, 0, 1, -1};
    public int longestIncreasingPath(int[][] matrix) {
        if (matrix == null || matrix.length == 0) return 0;
        
        int m = matrix.length, n = matrix[0].length;
        int[][] cache = new int[m][n];
        int max = 0;
        for (int i = 0; i < m; ++ i) {
            for (int j = 0; j < n; ++ j) {
                max = Math.max(max, dfs(matrix, i, j, cache));
            }
        }
        return max;
    }
    
    public int dfs(int[][] matrix, int x, int y, int[][] cache) {
        if (cache[x][y] != 0) return cache[x][y];
        
        for (int i = 0; i < 4; ++ i) {
            int nx = x + dx[i], ny = y + dy[i];
            if (nx >= 0 && nx < matrix.length && ny >= 0 && ny < matrix[0].length && matrix[nx][ny] > matrix[x][y])
                cache[x][y] = Math.max(cache[x][y], dfs(matrix, x + dx[i], y + dy[i], cache));
        }
        
        return ++cache[x][y];
    }
}
