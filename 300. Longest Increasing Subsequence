/**
 * Given an unsorted array of integers, find the length of longest increasing subsequence.
 *
 * Example:
 * Input: [10,9,2,5,3,7,101,18]
 * Output: 4 
 * Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
 *
 * Note:
 *   There may be more than one LIS combination, it is only necessary for you to return the length.
 *   Your algorithm should run in O(n2) complexity.
 *
 * Follow up: Could you improve it to O(n log n) time complexity?
 */
 
// Dynamic programming. Time complexity: O(n^2).
class Solution {
    public int lengthOfLIS(int[] nums) {
        int res = 0;
        int[] lis = new int[nums.length + 1];
        for (int i = 1; i < lis.length; ++i) {
            for (int j = 1; j < i; ++j) {
                if (nums[j - 1] < nums[i - 1]) {
                    lis[i] = Math.max(lis[i], lis[j]);
                }
            }
            lis[i]++;
            res = Math.max(res, lis[i]);
        }
        return res;
    }
}

// Approach #2: DP + Binary Search. Time O(nlogn)
class Solution {
    public int lengthOfLIS(int[] nums) {
        int len = 0;
        int[] dp = new int[nums.length];
        for (int num: nums) {
            int i = Arrays.binarySearch(dp, 0, len, num);
            if (i < 0)
                i = -(i + 1);
            dp[i] = num;
            if (i == len)
                len ++;
        }
        return len;
    }
}
