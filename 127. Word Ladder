/**
 * Given two words (beginWord and endWord), and a dictionary's word list, find the length of
 * shortest transformation sequence from beginWord to endWord, such that:
 *
 * Only one letter can be changed at a time.
 * Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
 * Note:
 * Return 0 if there is no such transformation sequence.
 * All words have the same length.
 * All words contain only lowercase alphabetic characters.
 * You may assume no duplicates in the word list.
 * You may assume beginWord and endWord are non-empty and are not the same.
 *
 * Example 1:
 * Input:
 * beginWord = "hit",
 * endWord = "cog",
 * wordList = ["hot","dot","dog","lot","log","cog"]
 *
 * Output: 5
 * Explanation: As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
 * return its length 5.
 *
 * Example 2:
 * Input:
 * beginWord = "hit"
 * endWord = "cog"
 * wordList = ["hot","dot","dog","lot","log"]
 *
 * Output: 0
 * Explanation: The endWord "cog" is not in wordList, therefore no possible transformation.
 */

class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        // Bidrectional BFS
        HashSet<String> beginSet = new HashSet<>(wordList);
        HashSet<String> endSet = new HashSet<>(wordList);
        Queue<String> beginQ = new LinkedList<>();
        Queue<String> endQ = new LinkedList<>();
        // 'endWord' can be not in wordList.
        if (!beginSet.contains(endWord)) {
            return 0;
        } else { // Remove 'endWord' from endSet in case of hitting 'endWord' at the first search.
            endSet.remove(endWord);
        }
        int res = 1;
        beginQ.offer(beginWord);
        endQ.offer(endWord);
        while (!beginQ.isEmpty() && !endQ.isEmpty()) {
            // Decrease the number of nodes that we have to search.
            if (beginQ.size() > endQ.size()) {
                Queue<String> q = beginQ;
                beginQ = endQ;
                endQ = q;
                HashSet<String> hs = beginSet;
                beginSet = endSet;
                endSet = hs;
            }
            int size = beginQ.size();
            res++;
            for (int i = 0; i < size; ++i) {
                String cur = beginQ.poll();
                for (int j = 0; j < cur.length(); ++j) {
                    StringBuilder sb = new StringBuilder(cur);
                    for (char c = 'a'; c <= 'z'; ++c) {
                        sb.setCharAt(j, c);
                        if (beginSet.contains(sb.toString())) {
                            if (!endSet.contains(sb.toString()) || sb.toString().equals(endWord)) {
                                return res;
                            }
                            beginSet.remove(sb.toString());
                            beginQ.offer(sb.toString());
                        }
                    }
                }
            }
        }
        return 0;
    }
}

// Time complexity: O(26n * L).
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Queue<String> queue = new LinkedList<>();
        HashSet<String> set = new HashSet<>(wordList);
        int res = 1;
        queue.offer(beginWord);
        while (!queue.isEmpty()) {
            int size = queue.size();
            res++;
            for (int i = 0; i < size; ++i) {
                String cur = queue.poll();
                for (int j = 0; j < cur.length(); ++j) {
                    StringBuilder sb = new StringBuilder(cur);
                    for (char c = 'a'; c <= 'z'; ++c) {
                        sb.setCharAt(j, c);
                        if (set.contains(sb.toString())) {
                            if (sb.toString().equals(endWord)) {
                                return res;
                            }
                            set.remove(sb.toString());
                            queue.offer(sb.toString());
                        }
                    }
                }
            }
        }
        return 0;
    }
}
