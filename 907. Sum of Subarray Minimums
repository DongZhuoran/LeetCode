/**
 * Given an array of integers A, find the sum of min(B), where B ranges over 
 * every (contiguous) subarray of A.
 * Since the answer may be large, return the answer modulo 10^9 + 7.
 *
 * Example 1:
 * Input: [3,1,2,4]
 * Output: 17
 * Explanation: Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
 *              Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.  Sum is 17.
 *
 * Note:
 *   1 <= A.length <= 30000
 *   1 <= A[i] <= 30000
 *
 * Official solution see:
 * https://leetcode.com/problems/sum-of-subarray-minimums/solution/
 */
 
// Brute force. time limit exceeded.
class Solution {
    public int sumSubarrayMins(int[] A) {
        int sum = 0;
        for (int i = 0; i < A.length; ++i) {
            int minVal = Integer.MAX_VALUE;
            for (int j = i; j < A.length; ++j) {
                minVal = Math.min(minVal, A[j]);
                sum += minVal;
                if (sum >= 1e9 + 7) {
                    sum = (int) (sum % (1e9 + 7));
                }
            }
        }
        return sum;
    }
}

// DP solution with monotonic stack. Time complexity: O(n).
// Refer to: https://www.jianshu.com/p/120ce297b6e7
class Solution {
    public int sumSubarrayMins(int[] A) {
        int len = A.length;
        if (len == 0) {
            return 0;
        }
        int sum = A[0];
        int mod = 1000000007;
        Stack<int[]> stack = new Stack<>();
        stack.push(new int[]{A[0], 0, A[0]});
        for (int i = 1; i < len; ++i) {
            if (A[i] >= stack.peek()[0]) {
                stack.push(new int[]{A[i], i, (A[i] + stack.peek()[2]) % mod});
            } else {
                while (!stack.isEmpty() && A[i] < stack.peek()[0]) {
                    stack.pop();
                }
                int idx = stack.isEmpty() ? -1 : stack.peek()[1];
                int val = stack.isEmpty() ? 0 : stack.peek()[2];
                stack.push(new int[]{A[i], i, ((i - idx) * A[i] + val) % mod});
            }
            sum = (sum + stack.peek()[2]) % mod;
        }
        return sum;
    }
}
