/**
 * Given a collection of distinct integers, return all possible permutations.
 *
 * Example:
 * Input: [1,2,3]
 * Output:
 * [
 *   [1,2,3],
 *   [1,3,2],
 *   [2,1,3],
 *   [2,3,1],
 *   [3,1,2],
 *   [3,2,1]
 * ]
 */

// Backtracking. Time complexity: O(n!).
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        Set<Integer> set = new HashSet<>();
        for (int n: nums) {
            set.add(n);
        }
        
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        backtrack(list, new ArrayList<>(), set);
        return list;
    }
    
    private void backtrack(List<List<Integer>> list, List<Integer> per, Set<Integer> set) {
        if (set.size() == 0) {
            list.add(new ArrayList<>(per));
            return;
        }
        for (int n: set) {
            Set<Integer> s = new HashSet(set);
            s.remove(n);
            per.add(n);
            backtrack(list, per, s);
            per.remove(per.size() - 1);
        }
    }
}
