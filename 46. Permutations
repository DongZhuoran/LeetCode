/**
 * Given a collection of distinct integers, return all possible permutations.
 *
 * Example:
 * Input: [1,2,3]
 * Output:
 * [
 *   [1,2,3],
 *   [1,3,2],
 *   [2,1,3],
 *   [2,3,1],
 *   [3,1,2],
 *   [3,2,1]
 * ]
 */

// Backtracking. The idea is same with the below one, but faster. A trade-off between space and time.
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        boolean[] used = new boolean[nums.length];
        Arrays.fill(used, false);
        backtrack(nums, list, new ArrayList<>(), used);
        return list;
    }

    private void backtrack(int[] nums, List<List<Integer>> list, List<Integer> per, boolean[] used){
        if(per.size() == nums.length){
            list.add(new ArrayList<>(per));
        } else{
            for(int i = 0; i < nums.length; ++i){ 
                if(used[i]) continue;
                per.add(nums[i]);
                used[i] = true;
                backtrack(nums, list, per, used);
                per.remove(per.size() - 1);
                used[i] = false;
            }
        }
    } 
}

// Backtracking. Time complexity: O(n!).
class Solution {
    public List<List<Integer>> permute(int[] nums) {
        Set<Integer> set = new HashSet<>();
        for (int n: nums) {
            set.add(n);
        }
        
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        backtrack(list, new ArrayList<>(), set);
        return list;
    }
    
    private void backtrack(List<List<Integer>> list, List<Integer> per, Set<Integer> set) {
        if (set.size() == 0) {
            list.add(new ArrayList<>(per));
            return;
        }
        for (int n: set) {
            Set<Integer> s = new HashSet(set);
            s.remove(n);
            per.add(n);
            backtrack(list, per, s);
            per.remove(per.size() - 1);
        }
    }
}
