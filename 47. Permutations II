/**
 * Given a collection of numbers that might contain duplicates, return all possible unique permutations.
 *
 * Example:
 * Input: [1,1,2]
 * Output:
 * [
 *   [1,1,2],
 *   [1,2,1],
 *   [2,1,1]
 * ]
 */

// Backtracking.
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        boolean[] used = new boolean[nums.length];
        Arrays.fill(used, false);
        backtrack(nums, list, new ArrayList<>(), used);
        return list;
    }
    
    private void backtrack(int[] nums, List<List<Integer>> list, List<Integer> per, boolean[] used) {
        if (per.size() == nums.length) {
            list.add(new ArrayList<>(per));
        } else {
            Set<Integer> set = new HashSet<>();
            for (int i = 0; i < nums.length; ++i) {
                if (used[i] || set.contains(nums[i])) continue;
                set.add(nums[i]);
                per.add(nums[i]);
                used[i] = true;
                backtrack(nums, list, per, used);
                per.remove(per.size() - 1);
                used[i] = false;
            }
        }
    }
}
