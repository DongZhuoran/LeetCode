/**
 * Given an integer array, your task is to find all the different possible increasing subsequences 
 * of the given array, and the length of an increasing subsequence should be at least 2.
 *
 * Example:
 * Input: [4, 6, 7, 7]
 * Output: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]
 *
 * Note:
 * 1. The length of the given array will not exceed 15.
 * 2. The range of integer in the given array is [-100,100].
 * 3. The given array may contain duplicates, and two equal integers should also be considered as a 
 *    special case of increasing sequence. 
 */
 
// Approach #1: dfs.
class Solution {
    public List<List<Integer>> findSubsequences(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        dfs(nums, 0, new ArrayList<>(), res);
        return res;
    }
    
    public void dfs(int[] nums, int index, List<Integer> cur, List<List<Integer>> res) {
        if (cur.size() > 1)
            res.add(new ArrayList<>(cur));
        Set<Integer> used = new HashSet<>();
        for (int i = index; i < nums.length; ++ i) {
            if(used.contains(nums[i])) continue;
            if (cur.size() == 0 || nums[i] >= cur.get(cur.size() - 1)) {
                used.add(nums[i]);
                cur.add(nums[i]);
                dfs(nums, i + 1, cur, res);
                cur.remove(cur.size() - 1);
            }
        }
    }
}
