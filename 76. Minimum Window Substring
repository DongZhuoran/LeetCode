/**
 * Given a string S and a string T, find the minimum window in S which will contain all the 
 * characters in T in complexity O(n).
 *
 * Example:
 * Input: S = "ADOBECODEBANC", T = "ABC"
 * Output: "BANC"
 * 
 * Note:
 * If there is no such window in S that covers all characters in T, return the empty string "".
 * If there is such window, you are guaranteed that there will always be only one unique minimum
 * window in S.
 */
 
// Approach #1: Sliding window. Time/Space complexity->O(|s| + |t|)
class Solution {
    public String minWindow(String s, String t) {
        if (s.length() == 0 || t.length() == 0) return "";
        
        Map<Character, Integer> dict = new HashMap<>();
        for (char c: t.toCharArray()) {
            dict.put(c, dict.getOrDefault(c, 0) + 1);
        }
        
        String res = "";
        int left = 0, right = 0;
        int formed = 0;
        Map<Character, Integer> window = new HashMap<>();
        while (right < s.length()) {
            char c = s.charAt(right);
            window.put(c, window.getOrDefault(c, 0) + 1);
            if (dict.containsKey(c) && dict.get(c).intValue() == window.get(c).intValue()) formed ++;
            
            while (left <= right && formed == dict.size()) {
                if (res.equals("") || right - left + 1 < res.length()) {
                    res = s.substring(left, right + 1);
                }
                
                c = s.charAt(left);
                window.put(c, window.get(c) - 1);
                if (dict.containsKey(c) && dict.get(c).intValue() > window.get(c).intValue()) formed --;
                left ++;
            }
            right ++;
        }
        return res;
    }
}
