/**
 * Implement pow(x, n), which calculates x raised to the power n (xn).
 *
 * Example 1:
 * Input: 2.00000, 10
 * Output: 1024.00000
 *
 * Example 2:
 * Input: 2.10000, 3
 * Output: 9.26100
 *
 * Example 3:
 * Input: 2.00000, -2
 * Output: 0.25000
 * Explanation: 2-2 = 1/22 = 1/4 = 0.25
 *
 * Note:
 * 1. -100.0 < x < 100.0
 * 2. n is a 32-bit signed integer, within the range [−231, 231 − 1]
 */
 
// AC iterative solution. Time complexity: O(log n).
class solution {
    public double myPow(double x, int n) {
        double ret = 1;
        if (n < 0) {
            x = 1 / x;
            n = -n;
        }
        while (n != 0) {
            if (n % 2 != 0) {
                ret *= x;
            }
            n = n / 2;
            x *= x;
        }
        return ret;
    }
}


// AC recursive solution. Time complexity: O(log n).
class Solution {
    public double myPow(double x, int n) {
        if (x == 0) {
            return 0;
        }
        
        if (n < 0) {
            x = 1 / x;
            n = -n;
        }
        
        return rec(x, n);
    }
    
    public double rec(double x, int n) {
        if (n == 0) {
            return 1;
        }
        double ret = rec(x, n/2);
        if (n % 2 == 0) {
            return ret * ret;
        } else {
            return ret * ret * x;
        }
    }
}
 
// DP solution. Limited memory exceeded.
class Solution {
    public double myPow(double x, int n) {
        if (x == 0) {
            return 0;
        }
        if (n == 0) {
            return 1;
        }
        if (n == 1) {
            return x;
        }
        if (n == -1) {
            return 1/x;
        }
        
        int absN = Math.abs(n);
        double[] pow = new double[absN];
        pow[0] = 1;
        pow[1] = x;
        for (int i = 2; i < absN && i < absN / 2 + 2; ++i) {
            pow[i] = pow[i/2] * pow[i - i/2];
        }
        if (n > 0) {
            return pow[absN/2] * pow[absN - absN/2];
        } else {
            return 1 / (pow[absN/2] * pow[absN - absN/2]);
        }
    }
}
