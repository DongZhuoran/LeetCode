/**
 * Given a binary tree, find the length of the longest consecutive sequence path.
 *
 * The path refers to any sequence of nodes from some starting node to any node 
 * in the tree along the parent-child connections. The longest consecutive path 
 * need to be from parent to child (cannot be the reverse).
 *
 * For example,
 *    1
 *     \
 *      3
 *     / \
 *    2   4
 *         \
 *          5
 * Longest consecutive sequence path is 3-4-5, so return 3.
 *
 *   2
 *    \
 *     3
 *    / 
 *   2    
 *  / 
 * 1
 * Longest consecutive sequence path is 2-3, not3-2-1, so return 2.
 */
 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
// Approach #1: Recursion. Time->O(n).
public class Solution {
    int max = 1;
    public int longestConsecutive(TreeNode root) {
        if (root == null) return 0;
        rec(root, 1);
        return max;
    }
    
    public void rec(TreeNode root, int len) {
        if (root.left != null) {
            if (root.val + 1 == root.left.val) {
                rec(root.left, len + 1);
                max = Math.max(max, len + 1);
            } else {
                rec(root.left, 1);
            }
        }
        
        if (root.right != null) {
            if (root.val + 1 == root.right.val) {
                rec(root.right, len + 1);
                max = Math.max(max, len + 1);
            } else {
                rec(root.right, 1);
            }
        }
    }
}
