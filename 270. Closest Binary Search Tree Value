/**
 * Closest Binary Search Tree Value
 * Given a non-empty binary search tree and a target value, find the value in 
 * the BST that is closest to the target.
 *
 * Note:
 * Given target value is a floating point.
 * You are guaranteed to have only one unique value in the BST that is closest to the target.
 */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
// Ierative solution. Time complexity: O(log n).
public class Solution {
    public int closestValue(TreeNode root, double target) {
        int res = root.val;
        while (root) {
            if (Math.abs(root.val - target) < Math.abs(ret - target)) {
                ret = root.val;
            }
            root = root.val > target ? root.left : root.right;
        }
        return res;
    }
}

// Recursivr solution.
public class solution {
    public int closestValue(TreeNode root, double target) {
        int res = root.val;
        TreeNode child = res > target ? root.left : root.right;
        int cloestDown = cloestValue(child, target);
        if (Math.abs(res - target) < Math.abs(closestDown - target)) {
            return res;
        } else {
            return closestDown;
        }
    }
}
