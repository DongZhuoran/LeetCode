/**
 * Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that 
 * can be built with those letters.
 *
 * This is case sensitive, for example "Aa" is not considered a palindrome here.
 *
 * Note:
 * Assume the length of given string will not exceed 1,010.
 *
 * Example:
 * Input:
 * "abccccdd"
 * Output:
 * 7
 * Explanation:
 * One longest palindrome that can be built is "dccaccd", whose length is 7.
 */
 
// Approach #1: greedy. Time complexity: O(n).
class Solution {
    public int longestPalindrome(String s) {
        if (s == null || s.length() == 0) return 0;
        
        int[] count = new int[128];
        for (char c: s.toCharArray()) {
            count[c] ++;
        }
        
        int res = 0;
        int inc = 0;
        for (int c: count) {
            if (c % 2 == 0) {
                res += c;
            } else {
                res += c - 1;
                inc = 1;
            }
        }
        return res + inc;
    }
}
