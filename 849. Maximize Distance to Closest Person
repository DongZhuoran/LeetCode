/**
 * In a row of seats, 1 represents a person sitting in that seat, and 0 represents that the 
 * seat is empty. 
 *
 * There is at least one empty seat, and at least one person sitting.
 *
 * Alex wants to sit in the seat such that the distance between him and the closest person to 
 * him is maximized. 
 *
 * Return that maximum distance to closest person.
 *
 * Example 1:
 * Input: [1,0,0,0,1,0,1]
 * Output: 2
 * Explanation: 
 * If Alex sits in the second open seat (seats[2]), then the closest person has distance 2.
 * If Alex sits in any other open seat, the closest person has distance 1.
 * Thus, the maximum distance to the closest person is 2.
 * 
 * Example 2:
 * Input: [1,0,0,0]
 * Output: 3
 * Explanation: 
 * If Alex sits in the last seat, the closest person is 3 seats away.
 * This is the maximum distance possible, so the answer is 3.
 * 
 * Note:
 * 1 <= seats.length <= 20000
 * seats contains only 0s or 1s, at least one 0, and at least one 1. 
 */
 
// Approach #1: Straightforward. Time O(N) Space O(1).
class Solution {
    public int maxDistToClosest(int[] seats) {
        int maxLen = 0;
        int curLen = 0;
        for (int i = 0; i < seats.length; ++ i) {
            if (seats[i] == 1) continue;
            int index = i;
            while (i < seats.length && seats[i] == 0) {
                curLen ++;
                i ++;
            }
            if (index != 0 && i != seats.length) {
                curLen = (curLen + 1) / 2;
            }
            maxLen = Math.max(maxLen, curLen);
            -- i;
            curLen = 0;
        }
        return maxLen;
    }
}

// Approach #2: Last Index of Seated. Time O(N) Space O(1).
/**
 * last is the index of last seated seat.
 * Loop on all seats, when we met a people, we count the distance from the last.
 * The final result = max(distance at the beginning, distance in the middle / 2, distance at the end). */
class Solution {
    public int maxDistToClosest(int[] seats) {
        int res = 0, n = seats.length, last = -1;
        for (int i = 0; i < n; ++i) {
            if (seats[i] == 1) {
                res = last < 0 ? i : Math.max(res, (i - last) / 2);
                last = i;
            }
        }
        res = Math.max(res, n - last - 1);
        return res;
    }
}
