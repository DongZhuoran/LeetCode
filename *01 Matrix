/**
 * Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.
 *
 * The distance between two adjacent cells is 1.
 * Example 1: 
 * Input:
 * 0 0 0
 * 0 1 0
 * 0 0 0
 * Output:
 * 0 0 0
 * 0 1 0
 * 0 0 0
 * 
 * Example 2: 
 * Input:
 * 0 0 0
 * 0 1 0
 * 1 1 1
 * Output:
 * 0 0 0
 * 0 1 0
 * 1 2 1
 *
 * Note:
 * - The number of elements of the given matrix will not exceed 10,000.
 * - There are at least one 0 in the given matrix.
 * - The cells are adjacent in only four directions: up, down, left and right.
 * 
 * For brute force (time exceeded), bfs and dp solution, refer to link:
 * https://leetcode.com/problems/01-matrix/solution/
 */
 
 /**
  * Using DFS method.
  * - Assigned a large value to all the positions with value 1 and don't have 0 neighbors
  * - Start dfs search from positions whose value is 1
  */
 class Solution {
    int[] dirx = {1, -1, 0, 0};
    int[] diry = {0, 0, 1, -1};
    
    public int[][] updateMatrix(int[][] matrix) {
        if (matrix.length == 0) return matrix;
        
        for (int i = 0; i < matrix.length; ++i) {
            for (int j = 0 ; j < matrix[0].length; ++j) {
                if (matrix[i][j]== 1 && !hasZeroNeighbor(matrix, i, j)) {
                    matrix[i][j] = Integer.MAX_VALUE;
                }
            }
        }
        
        for (int i = 0; i < matrix.length; ++i) {
            for (int j = 0; j < matrix[0].length; ++j) {
                if (matrix[i][j] == 1) {
                    dfs(matrix, i, j, 1);
                }
            }
        }
        return matrix;
    }
    
    public void dfs(int[][] matrix, int x, int y, int count) {
        if (x < 0 || x == matrix.length || y < 0 || y == matrix[0].length || matrix[x][y] < count) return;
        
        matrix[x][y] = count;
        for (int i = 0; i < dirx.length; ++i) {
            dfs(matrix, x + dirx[i], y + diry[i], count + 1);
        }
    }
    
    public boolean hasZeroNeighbor(int[][] matrix, int x, int y) {
        if (x > 0 && matrix[x - 1][y] == 0) return true;
        if (x + 1 < matrix.length && matrix[x + 1][y] == 0) return true;
        if (y > 0 && matrix[x][y - 1] == 0) return true;
        if (y + 1 < matrix[0].length && matrix[x][y + 1] == 0) return true;
        return false;
    }
}
