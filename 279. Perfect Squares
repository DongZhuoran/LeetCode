/**
 * Given a positive integer n, find the least number of perfect square numbers 
 * (for example, 1, 4, 9, 16, ...) which sum to n.
 *
 * Example 1:
 * Input: n = 12
 * Output: 3 
 * Explanation: 12 = 4 + 4 + 4.
 *
 * Example 2:
 * Input: n = 13
 * Output: 2
 * Explanation: 13 = 4 + 9.
 */
 
 // This is a Dynamic Programming problem, using brute force DFS will exceed memory limit 
 class Solution {
    public int numSquares(int n) {
        int dp[] = new int[n + 1];
        
        dp[0] = 0;
        for (int i = 1; i <= n; ++i) {
            int j = 1;
            int min = Integer.MAX_VALUE;
            while (i - j * j >=0) {
                min = Math.min(min, dp[i - j * j] + 1);
                j++;
            }
            dp[i] = min;
        }
        return dp[n];
    }
}

// Whenever there is a iterative DP solution, there will always be a recursive solution (dfs) with memoization.
// It is really important to record the node you have traveled to decrease the time cost.
class Solution {
    private int dfs(int n, int[] nums) {
        if (n == 0) {
            return 0;
        }
        int max_square = (int) Math.sqrt(n);
        int mini = Integer.MAX_VALUE;
        for (int i = max_square; i > 0; --i) {
            nums[i * i] = 1;
            int ret = 0;
            if (nums[n - i * i] == 0) {
                ret = dfs(n - i * i, nums);
                nums[n - i * i] = ret;
            } else {
                ret = nums[n - i * i];
            }
            mini = Math.min(mini, ret + 1);
        }
        return mini;
    }
    
    public int numSquares(int n) {
        int[] nums = new int[n + 1];
        return dfs(n, nums);
    }
}

// Brute force BFS, memory limit exceeded......
class Solution {
    public int numSquares(int n) {
        Queue<Integer> queue = new LinkedList<>();
        Map<Integer, Integer> map = new HashMap<>();
        int count = -1;
        int branch = (int) Math.sqrt(n);
        
        // Initialize the map
        for (int i = 1; i <= branch; ++i) {
            map.put(i, i * i);
        }
        
        // Add root node
        queue.offer(0);
        while (!queue.isEmpty()) {
            count++;
            int size = queue.size();
            for (int i = 0; i < size; ++i) {
                int cur = queue.poll();
                if (cur == n) return count;
                for (int j = 0; j < branch; ++j) {
                    if (cur + map.get(j + 1) <= n) {
                        queue.offer(cur + map.get(j + 1));
                    }
                }
            }
        }
        return -1;
    }
}
