/**
 * Given an unsorted array, find the maximum difference between the successive elements in its sorted form.
 * Return 0 if the array contains less than 2 elements.
 *
 * Example 1:
 * Input: [3,6,9,1]
 * Output: 3
 * Explanation: The sorted form of the array is [1,3,6,9], either
 *              (3,6) or (6,9) has the maximum difference 3.
 * 
 * Example 2:
 * Input: [10]
 * Output: 0
 * Explanation: The array contains less than 2 elements, therefore return 0.
 * 
 * Note:
 * You may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range.
 * Try to solve it in linear time/space.
 */
 
// Radix sort. Time/space complexity: O(n)
class Solution {
    public int maximumGap(int[] nums) {
        if (nums.length < 2) {
            return 0;
        }
        
        radixSort(nums);
        int max = 0;
        for (int i = 1; i < nums.length; ++i) {
            max = Math.max(max, (nums[i] - nums[i - 1]));
        }
        return max;
    }
    
    private void radixSort(int[] nums) {
        int max = 0;
        for (int n: nums) {
            max = Math.max(max, n);
        }
        
        List<List<Integer>> buckets = new ArrayList<List<Integer>>();
        for (int i = 0; i < 10; ++i) {
            buckets.add(new ArrayList<>());
        }
        
        int mod = 10;
        int dev = 1;
        while (max != 0) {
            for (int n: nums) {
                int bucketId = (n % mod) / dev;
                buckets.get(bucketId).add(n);
            }
            
            for (int i = 0, j = 0; j < nums.length && i < 10; ) {
                if (buckets.get(i).size() > 0) {
                    nums[j] = buckets.get(i).get(0);
                    buckets.get(i).remove(0);
                    j++;
                } else {
                    i++;
                }
            }
            
            mod *= 10;
            dev *= 10;
            max /= 10;
        }
    }
}
