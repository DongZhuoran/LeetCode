/**
 * Given an encoded string, return it's decoded string.
 *
 * The encoding rule is: k[encoded_string], where the encoded_string inside 
 * the square brackets is being repeated exactly k times. Note that k is 
 * guaranteed to be a positive integer.
 *
 * You may assume that the input string is always valid; No extra white spaces, 
 * square brackets are well-formed, etc.
 *
 * Furthermore, you may assume that the original data does not contain any digits 
 * and that digits are only for those repeat numbers, k. For example, there won't 
 * be input like 3a or 2[4].
 * 
 * Examples:
 * 
 * s = "3[a]2[bc]", return "aaabcbc".
 * s = "3[a2[c]]", return "accaccacc".
 * s = "2[abc]3[cd]ef", return "abcabccdcdcdef".
 */
 
 // Pretty slow solution
 class Solution {
    public String decodeString(String s) {
        if (s == null || s.length() == 0) return "";
        int idx = 0;
        String decodeString = "";
        if (Character.isDigit(s.charAt(idx))) {
            int count = 0;
            int start;
            int end;
            while (Character.isDigit(s.charAt(idx))) {
                count = count * 10 + (s.charAt(idx) - '0');
                idx++;
            }
            start = idx + 1;
            Stack<Character> stack = new Stack<>();
            stack.push('[');
            while (!stack.empty()) {
                idx++;
                if (s.charAt(idx) == '[') {
                    stack.push(']');
                } else if (s.charAt(idx) == ']') {
                    stack.pop();
                }
            }
            end = idx;
            String temp = decodeString(s.substring(start, end));
            for (int i = 0; i < count; ++i) {
                decodeString += temp;
            }
            return decodeString + decodeString(s.substring(end + 1));
        } else {
            while (idx < s.length() && Character.isLetter(s.charAt(idx))) {
                decodeString += s.charAt(idx);
                idx++;
            }
            return decodeString + decodeString(s.substring(idx));
        }
        
    }
}

// Use one stack
class Solution {  
    public String decodeString(String s) {
        String decoded = "";
        Stack<String> stack = new Stack<>();
        int index = 0;
        while (index < s.length()) {
            if (s.charAt(index) == ']') {
                String str = "";
                String countStr = "";
                String concate = "";
                while (!stack.peek().equals("[")) {
                    str = stack.pop() + str;
                }
                stack.pop();
                while (!stack.empty() && Character.isDigit(stack.peek().charAt(0))) {
                    countStr = stack.pop() + countStr;
                }
                int count = Integer.valueOf(countStr);
                for (int i = 0; i < count; ++i) {
                    concate += str;
                }
                stack.push(concate);
            } else {
                stack.push(String.valueOf(s.charAt(index)));
            }
            index++;
        }
        while (!stack.empty()) {
            decoded = stack.pop() + decoded;
        }
        return decoded;
    }
}

// Faster solution
class Solution {  
    public String decodeString(String s) {
        String decoded = "";
        Stack<String> countStack = new Stack<>();
        Stack<String> stringStack = new Stack<>();
        int index = 0;
        while (index < s.length()) {
            if (Character.isDigit(s.charAt(index))) {
                String count = "";
                while (Character.isDigit(s.charAt(index))) {
                    count += s.charAt(index);
                    index++;
                }
                countStack.push(count);
            } else if (s.charAt(index) == '[') {
                stringStack.push(decoded);
                decoded = "";
                index++;
            } else if (s.charAt(index) == ']') {
                StringBuilder sb = new StringBuilder(stringStack.pop());
                int count = Integer.valueOf(countStack.pop());
                for (int i = 0; i < count; ++i) {
                    sb.append(decoded);
                }
                decoded = sb.toString();
                index++;
            } else {
                decoded += s.charAt(index);
                index++;
            }
        }
        return decoded;
    }
}
