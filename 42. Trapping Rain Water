/**
 * Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is 
 * able to trap after raining.
 * (Image see https://leetcode.com/problems/trapping-rain-water/description/)
 * The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) 
 * are being trapped. Thanks Marcos for contributing this image!
 *
 * Example:
 * Input: [0,1,0,2,1,0,1,3,2,1,2,1]
 * Output: 6
 *
 * More approaches see https://leetcode.com/articles/trapping-rain-water/
 */
 
// Approach #1: Two monotonic stack. Time complexity: O(n).
class Solution {
    public int trap(int[] height) {
        if (height.length == 0) return 0;
        
        Stack<Integer> left = new Stack<>();
        Stack<Integer> right = new Stack<>();
        
        for (int i = 0; i < height.length; ++i) {
            if (left.empty()) {
                left.push(i);
            } else if (height[i] >= height[left.peek()]) {
                left.push(i);
            }
        }
        
        int th = left.peek();
        for (int i = height.length - 1; i >= th; --i) {
            if (right.empty()) {
                right.push(i);
            } else if (height[i] >= height[right.peek()]) {
                right.push(i);
            }
        }
        
        int trap = 0;
        while (left.size() > 1) {
            int i = left.pop() - 1;
            int cur = left.peek();
            while (i > cur) {
                trap += height[cur] - height[i];
                i--;
            }
        }
        
        while (right.size() > 1) {
            int i = right.pop() + 1;
            int cur = right.peek();
            while (i < cur) {
                trap += height[cur] - height[i];
                i++;
            }
        }
        
        return trap;
    }
}


// Approach #2: One stack.
class Solution {
    public int trap(int[] height) {
        int res = 0;
        Stack<Integer> stack = new Stack<>();
        for (int i = 0 ; i < height.length; ++ i) {
            while (!stack.empty() && height[i] > height[stack.peek()]) {
                int top = stack.pop();
                if (stack.empty()) break;
                int distance = i - stack.peek() - 1;
                int bound_height = Math.min(height[i], height[stack.peek()]) - height[top];
                res += distance * bound_height;
            }
            stack.push(i);
        }
        return res;
    }
}

// Approach #3: Two pointers. One pass.
class Solution {
    public int trap(int[] height) {
        int res = 0;
        int left = 0, right = height.length - 1;
        int leftMax = 0, rightMax = 0;
        while (left < right) {
            if (height[left] < height[right]) {
                if (height[left] >= leftMax)
                    leftMax = height[left];
                else 
                    res += leftMax - height[left];
                left ++;
            } else {
                if (height[right] >= rightMax)
                    rightMax = height[right];
                else
                    res += rightMax - height[right];
                right --;
            }
        }
        return res;
    }
}
