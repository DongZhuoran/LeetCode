/**
 * Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ... n.
 *
 * Example:
 * Input: 3
 * Output:
 * [
 *   [1,null,3,2],
 *   [3,2,null,1],
 *   [3,1,null,null,2],
 *   [2,1,3],
 *   [1,null,2,null,3]
 * ]
 * Explanation:
 * The above output corresponds to the 5 unique BST's shown below:
 *
 *    1         3     3      2      1
 *     \       /     /      / \      \
 *      3     2     1      1   3      2
 *     /     /       \                 \
 *    2     1         2                 3
 */
 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
// Approach #1: Recursion. 
class Solution {
    public List<TreeNode> generateTrees(int n) {
        if (n < 1) return new ArrayList<>();
        return rec(1, n, new HashMap<>());
    }
    
    public List<TreeNode> rec(int s, int e, Map<String, List<TreeNode>> cache) {
        String key = s + "_" + e;
        if (cache.containsKey(key)) {
            return cache.get(key);
        }
        
        List<TreeNode> res = new ArrayList<>();
        if (s == e) {
            res.add(new TreeNode(s));
            return res;
        }
        if (s > e) {
            res.add(null);
            return res;
        }
        
        for (int i = s; i <= e; ++i) {
            List<TreeNode> left = rec(s, i - 1, cache);
            List<TreeNode> right = rec(i + 1, e, cache);
            for (TreeNode l: left) {
                for (TreeNode r: right) {
                    TreeNode root = new TreeNode(i);
                    root.left = l;
                    root.right = r;
                    res.add(root);
                }
            }
        }
        cache.put(key, res);
        return res;
    }
}
