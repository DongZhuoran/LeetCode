/**
 * Given a 2D board and a word, find if the word exists in the grid.
 *
 * The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those 
 * horizontally or vertically neighboring. The same letter cell may not be used more than once.
 *
 * Example:
 * board =
 * [
 *   ['A','B','C','E'],
 *   ['S','F','C','S'],
 *   ['A','D','E','E']
 * ]
 *
 * Given word = "ABCCED", return true.
 * Given word = "SEE", return true.
 * Given word = "ABCB", return false.
 */
 
// DFS. 
class Solution {
    public boolean exist(char[][] board, String word) {
        if (board == null || board.length == 0) {
            return false;
        }
        if (word == null || word.length() == 0) {
            return true;
        }
        
        // Use boolean array as a substitute of hashset, a tradeoff between space and time.
        boolean[][] visited = new boolean[board.length][board[0].length];
        for (int i = 0; i < board.length; ++i) {
            for (int j = 0; j < board[i].length; ++j) {
                if (dfs(board, word, visited, i, j, 0)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private int[] ax = {1, -1, 0, 0};
    private int[] ay = {0, 0, 1, -1};
    
    private boolean dfs(char[][] board, String word, boolean[][] visited, int x, int y, int idx) {
        if (idx == word.length()) {
            return true;
        }
        if (x < 0 || x == board.length || y < 0 || y == board[0].length) {
            return false;
        }
        
        if (board[x][y] == word.charAt(idx) && !visited[x][y]) {
            visited[x][y] = true;
            for (int i = 0; i < 4; ++i) {
                if (dfs(board, word, visited, x + ax[i], y + ay[i], idx + 1)) {
                    return true;
                }
            }
            visited[x][y] = false;
        }
        return false;
    }
}
