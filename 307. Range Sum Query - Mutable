/**
 * Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.
 *
 * The update(i, val) function modifies nums by updating the element at index i to val.
 *
 * Example:
 * Given nums = [1, 3, 5]
 * sumRange(0, 2) -> 9
 * update(1, 2)
 * sumRange(0, 2) -> 8
 * 
 * Note:
 * The array is only modifiable by the update function.
 * You may assume the number of calls to update and sumRange function is distributed evenly.
 */
 
class NumArray {
    private int[] tree;
    private int N;

    public NumArray(int[] nums) {
        N = nums.length;
        tree = new int[N * 2];
        
        buildTree(nums);
    }
    
    private void buildTree(int[] nums) {
        // Build leaves.
        for (int i = 0; i < N; ++i) {
            tree[N + i] = nums[i];
        }
        
        // Build parents.
        for (int i = N - 1; i > 0; --i) {
            tree[i] = tree[i << 1] + tree[i << 1 | 1];
        }
    }
    
    public void update(int i, int val) {
        i = i + N;
        tree[i] = val;
        for (int k = i; k > 1; k >>= 1) {
            tree[k >> 1] = tree[k] + tree[k^1];
        }
    }
    
    public int sumRange(int i, int j) {
        int res = 0;
        for (i = i + N, j = j + N + 1; i < j; i >>= 1, j >>= 1) {
            if ((i & 1) > 0) {
                res += tree[i++];
            }
            if ((j & 1) > 0) {
                res += tree[--j];
            }
        }
        return res;
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(i,val);
 * int param_2 = obj.sumRange(i,j);
 */
