/**
 * Alex and Lee continue their games with piles of stones.  There are a number of piles arranged in a 
 * row, and each pile has a positive integer number of stones piles[i].  The objective of the game is 
 * to end with the most stones. 
 *
 * Alex and Lee take turns, with Alex starting first.  Initially, M = 1.
 *
 * On each player's turn, that player can take all the stones in the first X remaining piles, where 
 * 1 <= X <= 2M.  Then, we set M = max(M, X).
 *
 * The game continues until all the stones have been taken.
 *
 * Assuming Alex and Lee play optimally, return the maximum number of stones Alex can get.
 *
 * Example 1:
 * Input: piles = [2,7,9,4,4]
 * Output: 10
 * Explanation:  If Alex takes one pile at the beginning, Lee takes two piles, then Alex takes 2 piles 
 * again. Alex can get 2 + 4 + 4 = 10 piles in total. If Alex takes two piles at the beginning, then 
 * Lee can take all three piles left. In this case, Alex get 2 + 7 = 9 piles in total. So we return 
 * 10 since it's larger. 
 *
 * Constraints:
 * 1 <= piles.length <= 100
 * 1 <= piles[i] <= 10 ^ 4
 */
 
// Approach #1: Recursion with memorization.
class Solution {
    public int stoneGameII(int[] piles) {
        int n=piles.length;
        int[] sum=new int[n];
        sum[n-1]=piles[n-1];
        for(int i=n-2;i>=0;i--){
            sum[i]=sum[i+1]+piles[i];
        }
        int[][] hash = new int[n][n];
        return helper(hash,sum,0,1);
    }
    private int helper(int[][] hash,int[] sum,int start,int M ){
        if(start>=sum.length){
            return 0;
        }
        if(2*M>=sum.length-start){
            return sum[start];
        }
        if(hash[start][M] != 0) return hash[start][M];
        int min=Integer.MAX_VALUE;
        for(int x=1;x<=2*M;x++){
            min=Math.min(min,helper(hash,sum,start+x,Math.max(x,M)));
        }
        hash[start][M]=sum[start]-min;
        return hash[start][M];
    }
}
