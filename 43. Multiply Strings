/**
 * Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and 
 * num2, also represented as a string.
 *
 * Example 1:
 * Input: num1 = "2", num2 = "3"
 * Output: "6"
 *
 * Example 2:
 * Input: num1 = "123", num2 = "456"
 * Output: "56088"
 *
 * Note:
 *   The length of both num1 and num2 is < 110.
 *   Both num1 and num2 contain only digits 0-9.
 *   Both num1 and num2 do not contain any leading zero, except the number 0 itself.
 *   You must not use any built-in BigInteger library or convert the inputs to integer directly.
 */
 
// Apporach #1: Straightforward multiply. Time complexity: O(n^2).
class Solution {
    public String multiply(String num1, String num2) {
        if (num1 == null || num2 == null) return num1;
        if (num1.charAt(0) == '0' || num2.charAt(0) == '0') return "0";
        
        int n = num1.length(), m = num2.length();
        int[] product  = new int[n + m];
        char[] n1 = num1.toCharArray();
        char[] n2 = num2.toCharArray();
        
        for (int i = n - 1; i >= 0; -- i) {
            for (int j = m - 1; j >= 0; -- j) {
                product[i + j + 1] += (n1[i] - '0') * (n2[j] - '0');
            }
        }
        
        int carry = 0;
        for (int i = product.length - 1; i >= 0; -- i) {
            int sum = carry + product[i];
            product[i] = sum % 10;
            carry = sum / 10;
        }
        
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < product.length; ++ i) {
            if (product[i] == 0 && i == 0) continue;
            sb.append(product[i]);
        }
        return sb.toString();
    }
}
