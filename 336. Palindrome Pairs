/**
 * Given a list of unique words, find all pairs of distinct indices (i, j) in the given list, so that the 
 * concatenation of the two words, i.e. words[i] + words[j] is a palindrome.
 *
 * Example 1:
 * Input: ["abcd","dcba","lls","s","sssll"]
 * Output: [[0,1],[1,0],[3,2],[2,4]] 
 * Explanation: The palindromes are ["dcbaabcd","abcddcba","slls","llssssll"]
 *
 * Example 2:
 * Input: ["bat","tab","cat"]
 * Output: [[0,1],[1,0]] 
 * Explanation: The palindromes are ["battab","tabbat"]
 */
 
// Brute force. [Time limit exceeded]
class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        if (words == null || words.length < 2) {
            return new ArrayList<>();
        }
        
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        for (int i = 0; i < words.length - 1; ++i) {
            for (int j = i + 1; j < words.length; ++j) {
                if (isPalindrome(words[i], words[j])) {
                    res.add(Arrays.asList(i, j));
                }
                if (isPalindrome(words[j], words[i])) {
                    res.add(Arrays.asList(j, i}));
                }
            }
        }
        return res;
    }
    
    private boolean isPalindrome(String s1, String s2) {
        String s = s1 + s2;
        int left = 0, right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}
