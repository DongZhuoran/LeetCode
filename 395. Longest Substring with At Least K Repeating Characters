/**
 * Find the length of the longest substring T of a given string (consists of lowercase letters only) 
 * such that every character in T appears no less than k times.
 *
 * Example 1:
 * Input:
 * s = "aaabb", k = 3
 * Output:
 * 3
 * The longest substring is "aaa", as 'a' is repeated 3 times.
 * 
 * Example 2:
 * Input:
 * s = "ababbc", k = 2
 * Output:
 * 5
 * The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times. */
 
// Approach #1: sliding window. Time: O(n).
class Solution {
    int res = 0;
    public int longestSubstring(String s, int k) {
        if (s.length() < k) return 0;
        
        for (int i = 1; i <= 26; ++ i) {
            slidingWindow(s, k, i);
        }
        return res;
    }
    
    public void slidingWindow(String s, int k, int count) {
        Map<Character, Integer> map = new HashMap<>();
        int formed = count;
        
        int start = 0, end = 0;
        while (end < s.length()) {
            if (map.size() <= count) {
                char cur = s.charAt(end);
                map.put(cur, map.getOrDefault(cur, 0) + 1);
                if (map.get(cur) == k) formed --;
                end ++;
            } else {
                char cur = s.charAt(start);
                map.put(cur, map.get(cur) - 1);
                if (map.get(cur) == k - 1) formed ++;
                if (map.get(cur) == 0) map.remove(cur);
                start ++;
            }
            if (map.size() == count && formed == 0) {
                res = Math.max(res, end - start);
            }
        }
    }
}
