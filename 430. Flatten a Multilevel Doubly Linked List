/**
 * You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer,
 * which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, 
 * and so on, to produce a multilevel data structure, as shown in the example below.
 *
 * Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first 
 * level of the list.
 *
 * Example:
 * Input:
 * 1---2---3---4---5---6--NULL
 *          |
 *          7---8---9---10--NULL
 *              |
 *              11--12--NULL
 *
 * Output:
 * 1-2-3-7-8-11-12-9-10-4-5-6-NULL
 */
 
/*
// Definition for a Node.
class Node {
    public int val;
    public Node prev;
    public Node next;
    public Node child;

    public Node() {}

    public Node(int _val,Node _prev,Node _next,Node _child) {
        val = _val;
        prev = _prev;
        next = _next;
        child = _child;
    }
};
*/

// Approach #1: Stack. Time complexity: O(Nodes).
class Solution {
    public Node flatten(Node head) {
        if (head == null) return head;
        
        Stack<Node> stack = new Stack<>();
        stack.push(null);
        Node cur = head;
        while (!stack.empty() || cur.next != null || cur.child != null) {
            while (cur.next != null || cur.child != null) {
                if (cur.child != null) {
                    stack.push(cur.next);
                    cur.next = cur.child;
                    cur.child.prev = cur;
                    cur.child = null;
                }
                cur = cur.next;
            }
            while (!stack.empty() && stack.peek() == null) {
                stack.pop();
            }
            if (!stack.empty()) {
                cur.next = stack.pop();
                cur.next.prev = cur;
                cur = cur.next;
            }
        }
        return head;
    }
}

// Approach #2: Time complexity: O(Nodes).
class Solution {
    public Node flatten(Node head) {
        if (head == null) return head;
        
        Node cur = head;
        while (cur != null) {
            // CASE 1: if no child, proceed.
            if (cur.child == null) {
                cur = cur.next;
                continue;
            }
            
            // CASE 2: got child, find the tail of the child link and link it to cur.next.
            Node temp = cur.child;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = cur.next;
            if (cur.next != null) cur.next.prev = temp;
            cur.next = cur.child;
            cur.child.prev = cur;
            cur.child = null;
        }
        return head;
    }
}
