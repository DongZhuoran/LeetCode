/**
 * Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent
 * different tasks.Tasks could be done without original order. Each task could be done in one interval. For each interval,
 * CPU could finish one task or just be idle.
 *
 * However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals 
 * that CPU are doing different tasks or just be idle.
 *
 * You need to return the least number of intervals the CPU will take to finish all the given tasks.
 *
 * Example:
 * Input: tasks = ["A","A","A","B","B","B"], n = 2
 * Output: 8
 * Explanation: A -> B -> idle -> A -> B -> idle -> A -> B.
 *
 * Note:
 * The number of tasks is in the range [1, 10000].
 * The integer n is in the range [0, 100].
 */

// Time complexity: O(n).
class Solution {
    public int leastInterval(char[] tasks, int n) {
        int[] tasksCount = new int[26];
        for (char c: tasks) {
            tasksCount[c - 'A']++;
        }  
        Arrays.sort(tasksCount);
        
        int max_val = tasksCount[25] - 1, idle_slots = max_val * n;
        for (int i = 24; i >= 0 && tasksCount[i] > 0; --i) {
            idle_slots -= Math.min(max_val, tasksCount[i]);
        }
        return idle_slots > 0 ? idle_slots + tasks.length : tasks.length;
    }
}

// Time complexity: O(n), where n is the number of tasks.
class Solution {
    public int leastInterval(char[] tasks, int n) {
        if (tasks.length == 0 || n == 0) {
            return tasks.length;
        }
        
        int[] tasksCount = new int[26];
        for (char c: tasks) {
            tasksCount[c - 'A']++;
        }
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> Integer.compare(b, a));
        for (int i = 0; i < tasksCount.length; ++i) {
            if (tasksCount[i] > 0) {
                pq.add(tasksCount[i]);
            }
        }
        
        int res = 0;
        while (!pq.isEmpty()) {
            int size = pq.size();
            List<Integer> list = new ArrayList<>();
            for (int i = 0; i < Math.min(size, n + 1); ++i) {
                int cur = pq.poll();
                cur--;
                if (cur > 0) {
                    list.add(cur);
                }
                res++;
            }
            if (list.size() == 0 && size <= n + 1) {
                return res;
            }
            if (list.size() > 0 && size <= n + 1) {
                res += n - size + 1;
            }
            for (int a: list) {
                pq.add(a);
            }
        }
        return res;
    }
}
