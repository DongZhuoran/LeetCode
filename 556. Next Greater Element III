/**
 * Given a positive 32-bit integer n, you need to find the smallest 32-bit integer which has exactly the same 
 * digits existing in the integer n and is greater in value than n. If no such positive 32-bit integer exists,
 * you need to return -1.
 *
 * Example 1:
 * Input: 12
 * Output: 21
 *
 * Example 2:
 * Input: 21
 * Output: -1
 */
 
// Approach #1: Mono stack. Time compexity: O(n).
class Solution {
    public int nextGreaterElement(int n) {
        char[] arr = String.valueOf(n).toCharArray();
        Stack<Integer> stack = new Stack<>();
        for (int i = arr.length - 1; i >= 0; -- i) {
            int sub = -1;
            while (!stack.empty() && arr[stack.peek()] > arr[i]) {
                sub = stack.pop();
            }
            if (sub != -1) {
                char temp = arr[i];
                arr[i] = arr[sub];
                arr[sub] = temp;
                reverseRangeOf(arr, i + 1, arr.length - 1);
                double res = Double.valueOf(String.valueOf(arr));
                if (res > Integer.MAX_VALUE) {
                    return -1;
                } else {
                    return (int) res;
                }
            }
            stack.push(i);
        }
        return -1;
    }
    
    public void reverseRangeOf(char[] arr, int start, int end) {
        while (start < end) {
            char temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start ++;
            end --;
        }
    }
}
