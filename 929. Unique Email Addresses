/**
 * Every email consists of a local name and a domain name, separated by the @ sign.
 *
 * For example, in alice@leetcode.com, alice is the local name, and leetcode.com is the domain name.
 *
 * Besides lowercase letters, these emails may contain '.'s or '+'s.
 * If you add periods ('.') between some characters in the local name part of an email address, mail sent there will
 * be forwarded to the same address without dots in the local name.  For example, "alice.z@leetcode.com" and 
 * "alicez@leetcode.com" forward to the same email address.  (Note that this rule does not apply for domain names.)
 * If you add a plus ('+') in the local name, everything after the first plus sign will be ignored. This allows certain
 * emails to be filtered, for example m.y+name@email.com will be forwarded to my@email.com.  (Again, this rule does not
 * apply for domain names.)
 * It is possible to use both of these rules at the same time.
 *
 * Given a list of emails, we send one email to each address in the list.  How many different addresses actually receive mails? 
 *
 * Example 1:
 * Input: ["test.email+alex@leetcode.com","test.e.mail+bob.cathy@leetcode.com","testemail+david@lee.tcode.com"]
 * Output: 2
 * Explanation: "testemail@leetcode.com" and "testemail@lee.tcode.com" actually receive mails
 *
 * Note:
 * 1 <= emails[i].length <= 100
 * 1 <= emails.length <= 100
 * Each emails[i] contains exactly one '@' character.
 */

// Prefix tree. Time complexity: O(kn), where k is average length of strings, n is number of strings.
class Solution {
    private TrieNode root;
    
    public int numUniqueEmails(String[] emails) {
        if (emails.length == 0) {
            return 0;
        }
        
        int res = 0;
        root = new TrieNode();
        for (String email: emails) {
            res += insert(email.toCharArray());
        }
        return res;
    }
    
    private int insert(char[] email) {
        int res = 0;
        TrieNode cur = root;
        int index = (new String(email)).indexOf("@");
        for (int i = 0; i < email.length; ++i) {
            if (i < index && email[i] == '.') {
                continue;
            } else if (i < index && email[i] == '+') {
                while (email[i] != '@') {
                    i++;
                }
            }
            if (!cur.children.containsKey(email[i])) {
                res = 1;
                cur.children.put(email[i], new TrieNode());
            }
            cur = cur.children.get(email[i]);
        }
        cur.val += 1;
        return res;
    }
    
    private class TrieNode {
        int val = 0;
        Map<Character, TrieNode> children = new HashMap<>();
        public TrieNode() {}
    }
}

// Canonical Form. Time complexity is the same to the above one.
class Solution {
    public int numUniqueEmails(String[] emails) {
        if (emails.length == 0) {
            return 0;
        }
        
        Set<String> set = new HashSet<>();
        for (String email: emails) {
            int idx = email.indexOf("@");
            String local = email.substring(0, idx);
            String rest = email.substring(idx);
            if (local.contains("+")) {
                local = local.substring(0, local.indexOf("+"));
            }
            local = local.replaceAll(".", "");
            set.add(local + rest);
        }
        return set.size();
    }
}
