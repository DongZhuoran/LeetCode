/**
 * Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that 
 * a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.
 *
 * Note:
 * The solution set must not contain duplicate quadruplets.
 *
 * Example:
 * Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.
 * A solution set is:
 * [
 *   [-1,  0, 0, 1],
 *   [-2, -1, 1, 2],
 *   [-2,  0, 0, 2]
 * ]
 */

// Approach #1: Backtracking.
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        backtracking(nums, 0, target, new ArrayList<Integer>(), res, 0);
        return res;
    }
    
    public void backtracking(int[] nums, int index, int target, List<Integer> list, List<List<Integer>> res, int count) {
        if (target == 0 && count == 4) {
            res.add(new ArrayList<>(list));
            return;
        } else if (count >= 4) {
            return;
        }
        for (int i = index; i < nums.length; ++i) {
            list.add(nums[i]);
            backtracking(nums, i + 1, target - nums[i], list, res, count + 1);
            list.remove((Integer) nums[i]);
            while (i < nums.length - 1 && nums[i] == nums[i + 1]) i++;
        }
    }
}
