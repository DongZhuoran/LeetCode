/**
 * Given a binary tree, return the postorder traversal of its nodes' values.
 * 
 * Example:
 * Input: [1,null,2,3]
 *   1
 *    \
 *     2
 *    /
 *   3
 * Output: [3,2,1]
 * 
 * Follow up: Recursive solution is trivial, could you do it iteratively?
 */
 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
// Iterative solution.
// Concise solution see:
// https://leetcode.com/explore/learn/card/data-structure-tree/134/traverse-a-tree/930/discuss/45551/Preorder-Inorder-and-Postorder-Iteratively-Summarization
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if (root == null) {
            return res;
        }
        
        Stack<TreeNode> stack = new Stack<>();
        Set<TreeNode> visited = new HashSet<>();
        stack.push(root);
        while (!stack.empty()) {
            TreeNode curNode = stack.peek();
            if (curNode.right != null && !visited.contains(curNode.right)) {
                if (curNode.left != null && !visited.contains(curNode.left)) {
                    stack.push(curNode.right);
                    stack.push(curNode.left);
                } else {
                    stack.push(curNode.right);
                }
            } else if (curNode.right == null) {
                if (curNode.left != null && !visited.contains(curNode.left)) {
                    stack.push(curNode.left);
                } else {
                    stack.pop();
                    res.add(curNode.val);
                    visited.add(curNode);
                }
            } else {
                stack.pop();
                res.add(curNode.val);
                visited.add(curNode);
            }
        }
        return res;
    }
}
