/**
 * You are given an integer array nums and you have to return a new counts array. The counts array 
 * has the property where counts[i] is the number of smaller elements to the right of nums[i].
 *
 * Example:
 * Input: [5,2,6,1]
 * Output: [2,1,1,0] 
 * Explanation:
 * To the right of 5 there are 2 smaller elements (2 and 1).
 * To the right of 2 there is only 1 smaller element (1).
 * To the right of 6 there is 1 smaller element (1).
 * To the right of 1 there is 0 smaller element. */
 
// Approach #1: MergeSort. Time: O(nlogn).
class Solution {
    class Pair {
        int index;
        int value;
        public Pair(int i, int v) {
            index = i;
            value = v;
        }
    }
    
    public List<Integer> countSmaller(int[] nums) {
        List<Integer> res = new ArrayList<>();
        if (nums == null || nums.length == 0) return res;
        
        Pair[] arr = new Pair[nums.length];
        for (int i = 0; i < nums.length; ++ i) {
            arr[i] = new Pair(i, nums[i]);
        }
        
        int[] smaller = new int[nums.length];
        mergeSort(arr, smaller);
        for (int i: smaller) res.add(i);
        return res;
    }
    
    public Pair[] mergeSort(Pair[] arr, int[] smaller) {
        if (arr.length <= 1) return arr;
        
        int mid = arr.length / 2;
        Pair[] left = mergeSort(Arrays.copyOfRange(arr, 0, mid), smaller);
        Pair[] right = mergeSort(Arrays.copyOfRange(arr, mid, arr.length), smaller);
        for (int i = 0, j = 0; i < left.length || j < right.length;) {
            if (j == right.length || i < left.length && left[i].value <= right[j].value) {
                arr[i + j] = left[i];
                smaller[left[i].index] += j;
                i ++;
            } else {
                arr[i + j] = right[j];
                j ++;
            }
        }
        return arr;
    }
}
