/**
 * Given a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon 
 * subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be 
 * any subsequence of the other strings.
 *
 * A subsequence is a sequence that can be derived from one sequence by deleting some characters without changing
 * the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a
 * subsequence of any string.
 *
 * The input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence.
 * If the longest uncommon subsequence doesn't exist, return -1.
 *
 * Example 1:
 * Input: "aba", "cdc", "eae"
 * Output: 3
 *
 * Note:
 *     All the given strings' lengths will not exceed 10.
 *     The length of the given list will be in the range of [2, 50].
 */

// PriorityQueue + HashMap. Time complexity: O(kn^2), where n is number of strings, and k is average length of strings. 
class Solution {
    public int findLUSlength(String[] strs) {
        PriorityQueue<String> pq = new PriorityQueue<>(new Comparator<String>() {
            @Override
            public int compare(String s1, String s2) {
                return s2.length() - s1.length();
            }
        });
        for (String s: strs) {
            pq.add(s);
        }
        
        Map<String, Integer> map = new HashMap<>();
        for (String s: strs) {
            map.put(s, 1 + map.getOrDefault(s, 0));
        }
        while (!pq.isEmpty()) {
            String str = pq.poll();
            if (map.get(str) == 1) {
                int i = 0;
                for (String s: strs) {
                    if (s.length() <= str.length()) {
                        i++;
                    } else if (!isSubsequence(s, str)) {
                        i++;
                    } else {
                        break;
                    }
                }
                if (i == strs.length) {
                    return str.length();
                }
            }
        }
        return -1;
    }
    
    private boolean isSubsequence(String s1, String s2) {
        char[] ch = s2.toCharArray();
        int idx = -1;
        for (int i = 0; i < ch.length; ++i) {
            idx = s1.indexOf(ch[i], idx + 1);
            if (idx == -1) {
                return false;
            }
        }
        return true;
    }
}
