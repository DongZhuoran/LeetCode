/**
 * Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.
 *
 * Example:
 * Input: n = 4, k = 2
 * Output:
 * [
 *   [2,4],
 *   [3,4],
 *   [2,3],
 *   [1,2],
 *  [1,3],
 *   [1,4],
 * ]
 */

// Approach #1: Backtracking.
class Solution {
    public List<List<Integer>> combine(int n, int k) {
        if (n == 0 || k <= 0) {
            return new ArrayList<>();
        }
        
        List<List<Integer>> res = new ArrayList<>();
        backtracking(n, k, new ArrayList<>(), res, 1);
        return res;
    }
    
    public void backtracking(int n, int k, List<Integer> comb, List<List<Integer>> res, int index) {
        if (k == 0) {
            res.add(new ArrayList<>(comb));
            return;
        }
        for (int i = index; i <= n; ++i) {
            comb.add(i);
            backtracking(n, k - 1, comb, res, i + 1);
            comb.remove((Integer) i);
        }
    }
}
