/**
 * Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique 
 * combinations in candidates where the candidate numbers sums to target.
 *
 * The same repeated number may be chosen from candidates unlimited number of times.
 *
 * Note:
 * - All numbers (including target) will be positive integers.
 * - The solution set must not contain duplicate combinations.
 *
 * Example 1:
 * Input: candidates = [2,3,6,7], target = 7,
 * A solution set is:
 * [
 *   [7],
 *   [2,2,3]
 * ]
 *
 * Example 2:
 * Input: candidates = [2,3,5], target = 8,
 * A solution set is:
 * [
 *   [2,2,2,2],
 *   [2,3,3],
 *   [3,5]
 * ]
 */
 
// Approach #1: Backtracking.
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        if (candidates == null || candidates.length == 0 || target < 0) {
            return new ArrayList<>();
        }
        
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<>();
        backtracking(candidates, target, new ArrayList<>(), res, 0);
        return res;
    }
    
    public void backtracking(int[] candidates, int target, List<Integer> comb, List<List<Integer>> res, int index) {
        if (target == 0) {
            res.add(new ArrayList<>(comb));
        }
        for (int i = index; i < candidates.length && candidates[i] <= target; ++i) {
            comb.add(candidates[i]);
            backtracking(candidates, target - candidates[i], comb, res, i);
            comb.remove((Integer) candidates[i]);
        }
    }
}
