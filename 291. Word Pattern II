/**
 * Given a pattern and a string str, find if str follows the same pattern.
 *
 * Here follow means a full match, such that there is a bijection between a letter in pattern and
 * a non-empty substring in str.
 *
 * Example 1:
 * Input: pattern = "abab", str = "redblueredblue"
 * Output: true
 *
 * Example 2:
 * Input: pattern = pattern = "aaaa", str = "asdasdasdasd"
 * Output: true
 *
 * Example 3:
 * Input: pattern = "aabb", str = "xyzabcxzyabc"
 * Output: false
 *
 * Notes:
 * You may assume both pattern and str contains only lowercase letters.
 */

// Approach #1: backtracking. Time O(N!)
class Solution {
    public boolean wordPatternMatch(String pattern, String str) {
        if (pattern.length() < str.length()) return false;
        return backtracking(pattern, 0, str, 0, new HashMap<>(), new HashSet<>());
    }

    private boolean backtracking(String pattern, int i, String str, int j, Map<Character, String> map, Set<String> set) {
        if (i == pattern.length() && j == str.length()) return true;
        if (i == pattern.length() || j == str.length()) return false;

        char c = pattern.charAt(i);
        if (map.containsKey(c)) {
            String s = map.get(c);
            if (str.startsWith(s))
                return backtracking(pattern, i + 1, str, j + s.length(), map, set);
            return false;
        }

        for (int end = j + 1; end <= str.length(); ++ end) {
            String s = str.substring(j, end);
            if (set.contains(s)) continue;
            map.put(c, s);
            set.add(s);
            if (backtracking(pattern, i + 1, str, end, map, set))
                return true;
            map.remove(c);
            set.remove(s);
        }
        return false;
    }
}
