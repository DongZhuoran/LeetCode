/**
 * A full binary tree is a binary tree where each node has exactly 0 or 2 children.
 * 
 * Return a list of all possible full binary trees with N nodes. Each element of the
 * answer is the root node of one possible tree. Each node of each tree in the answer 
 * must have node.val = 0. You may return the final list of trees in any order.
 *
 * Example 1:
 * Input: 7
 * Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],
 *          [0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]
 *
 */
 
 /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 // see analysis: https://leetcode.com/problems/all-possible-full-binary-trees/solution/
class Solution {
    Map<Integer, List<TreeNode>> map = new HashMap<>();
    public List<TreeNode> allPossibleFBT(int N) {
        if (map.containsKey(N)) return map.get(N);
        
        List<TreeNode> list = new ArrayList<>();
        if ((N - 1) % 2 != 0) {
            return list;
        }
        if (N == 1) {
            list.add(new TreeNode(0));
        } else {
            for (int i = 0; i < N; i++) {
                int x = N - 1 - i;
                for (TreeNode leftTree: allPossibleFBT(i)) {
                    for (TreeNode rightTree: allPossibleFBT(x)) {
                        TreeNode newNode = new TreeNode(0);
                        newNode.left = leftTree;
                        newNode.right = rightTree;
                        list.add(newNode);
                    }
                }
            }
        }
        map.put(N, list);
        return list;
    }
}
