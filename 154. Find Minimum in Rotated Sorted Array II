/**
 * Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
 * (i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).
 * Find the minimum element. The array may contain duplicates.
 *
 * Example 1:
 * Input: [1,3,5]
 * Output: 1
 * 
 * Example 2:
 * Input: [2,2,2,0,1]
 * Output: 0
 * 
 * Note:
 * - This is a follow up problem to Find Minimum in Rotated Sorted Array.
 * - Would allow duplicates affect the run-time complexity? How and why?
 * 
 * Another O(log n) solution see:
 * https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/discuss/167981/Beats-100-Binary-Search-with-Explanations
 */
 
class Solution {
    public int findMin(int[] nums) {
        return nums[findPivot(nums, 0, nums.length - 1)];
    }
    
    public int findPivot(int[] nums, int start, int end) {
        if (start >= end) {
            return 0;
        }
        
        int mid = start + (end - start) / 2;
        if (mid > start && nums[mid] < nums[mid - 1]) {
            return mid;
        } else if (mid < end && nums[mid] > nums[mid + 1]) {
            return mid + 1;
        } else {
            return Math.max(findPivot(nums, start, mid - 1), findPivot(nums, mid + 1, end));
        }
    }
}
