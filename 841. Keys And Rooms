/**
 * There are N rooms and you start in room 0.  Each room has a distinct number 
 * in 0, 1, 2, ..., N-1, and each room may have some keys to access the next room. 
 *
 * Formally, each room i has a list of keys rooms[i], and each key rooms[i][j] is an 
 * integer in [0, 1, ..., N-1] where N = rooms.length.  A key rooms[i][j] = v opens 
 * the room with number v.
 *
 * Initially, all the rooms start locked (except for room 0). You can walk back and 
 * forth between rooms freely. Return true if and only if you can enter every room.
 *
 * Example 1:
 * Input: [[1],[2],[3],[]]
 * Output: true
 * Explanation:  
 * - We start in room 0, and pick up key 1.
 * - We then go to room 1, and pick up key 2.
 * - We then go to room 2, and pick up key 3.
 * - We then go to room 3.  Since we were able to go to every room, we return true.
 * 
 * Example 2:
 * Input: [[1,3],[3,0,1],[2],[0]]
 * Output: false
 * Explanation: We can't enter the room with number 2.
 */
 
 // DFS solution, much faster than BFS
 class Solution {
    public boolean canVisitAllRooms(List<List<Integer>> rooms) {
        Set<Integer> visited = new HashSet<>();
        
        visit(rooms, 0, visited);
        
        if (visited.size() < rooms.size()) return false;
        
        return true;
    }
    
    public void visit(List<List<Integer>> rooms, int roomIndex, Set<Integer> visited) {
    
        if(visited.contains(roomIndex)) {
            return;
        }
        
        visited.add(roomIndex);
        List<Integer> keys = rooms.get(roomIndex);
        
        for(int i = 0; i < keys.size(); i++) {
            visit(rooms, keys.get(i), visited);
        }
    }
}

// Second DFS solution, faster than the above one
class Solution {
    public boolean canVisitAllRooms(List<List<Integer>> rooms) {
        boolean visited[] = new boolean[rooms.size()];
        visit(rooms, 0, visited);
        
        for(int i = 0; i < visited.length; i++) {
            if(visited[i] == false) {
                return false;
            }
        }
        
        return true;
    }
    
    public void visit(List<List<Integer>> rooms, 
                      int roomIndex, 
                      boolean[] visited) {
    
        if(visited[roomIndex] == true) {
            return;
        }
        
        visited[roomIndex] = true;
        List<Integer> room = rooms.get(roomIndex);
        
        for(int i = 0; i < room.size(); i++) {
            visit(rooms, room.get(i), visited);
        }
    }
}
 
 // BFS solution
 class Solution {
    public boolean canVisitAllRooms(List<List<Integer>> rooms) {
        if (rooms.size() == 0) {
            if (rooms.get(0).size() == 0) {
                return true;
            } else {
                return false;
            }
        }
        
        Set<Integer> visited = new HashSet<>();
        Queue<Integer> queue = new LinkedList<>();
        
        queue.offer(0);
        visited.add(0);
        while (!queue.isEmpty()) {
            int cur = queue.peek();
            for (int i = 0; i < queue.size(); ++i) {
                List<Integer> curList = rooms.get(cur);
                for (int item: curList) {
                    if (!visited.contains(item)) {
                        queue.offer(item);
                        visited.add(item);
                    }
                }
            }
            queue.poll();            
        }
        if (visited.size() < rooms.size()) return false;
        return true;
    }
}
