/**
 * Given an array nums sorted in ascending order, return true if and only if you can split it 
 * into 1 or more subsequences such that each subsequence consists of consecutive integers and 
 * has length at least 3.
 *
 * Example 1:
 * Input: [1,2,3,3,4,5]
 * Output: True
 * Explanation:
 * You can split them into two consecutive subsequences : 
 * 1, 2, 3
 * 3, 4, 5
 *
 * Example 2:
 * Input: [1,2,3,3,4,4,5,5]
 * Output: True
 * Explanation:
 * You can split them into two consecutive subsequences : 
 * 1, 2, 3, 4, 5
 * 3, 4, 5
 *
 * Example 3:
 * Input: [1,2,3,4,4,5]
 * Output: False
 *
 * Constraints:
 * 1 <= nums.length <= 10000 */
 
// Approachh #1: Greedy. Time/Space->O(n).
class Solution {
    public boolean isPossible(int[] nums) {
        Map<Integer, Integer> dict = new HashMap<>();
        for (int num: nums) 
            dict.put(num, dict.getOrDefault(num, 0) + 1);
        
        for (int i = 0; i < nums.length; ++ i) {
            if (dict.get(nums[i]) > 0) {
                dict.put(nums[i], dict.get(nums[i]) - 1);
                int num = nums[i] + 1;
                while (dict.containsKey(num) && dict.get(num) > dict.get(num - 1)) {
                    dict.put(num, dict.get(num) - 1);
                    num ++;
                }
                if (num - nums[i] < 3)
                    return false;
            }
        }
        return true;
    }
}
