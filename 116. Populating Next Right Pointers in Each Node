/**
 * Given a binary tree
 *
 * struct TreeLinkNode {
 *   TreeLinkNode *left;
 *   TreeLinkNode *right;
 *   TreeLinkNode *next;
 * }
 * Populate each next pointer to point to its next right node. If there is no next right 
 * node, the next pointer should be set to NULL.
 * 
 * Initially, all next pointers are set to NULL.
 *
 * Note:
 * - You may only use constant extra space.
 * - Recursive approach is fine, implicit stack space does not count as extra space for this problem.
 * - You may assume that it is a perfect binary tree (ie, all leaves are at the same level, 
 *   and every parent has two children).
 *
 * Example:
 * Given the following perfect binary tree,
 *
 *      1
 *    /  \
 *   2    3
 *  / \  / \
 * 4  5  6  7
 * After calling your function, the tree should look like:
 *
 *      1 -> NULL
 *    /  \
 *   2 -> 3 -> NULL
 *  / \  / \
 * 4->5->6->7 -> NULL
 */
 
 /**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
// 利用BFS遍历，队列中每次处理一层的节点，从最左节点开始依次将next指向下一节点
public class Solution {
    public void connect(TreeLinkNode root) {
        if (root == null || root.left == null) return;
        Queue<TreeLinkNode> queue = new LinkedList<>();
        queue.offer(root);
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; ++i) {
                TreeLinkNode cur = queue.poll();
                // 如果该层节点没有处理完，当前节点next指向下一节点，
                // 若已经处理完，当前节点next指向null
                if (i + 1 < size) {
                    cur.next = queue.peek();
                } else {
                    cur.next = null;
                }
                if (cur.left != null) {
                    queue.offer(cur.left);
                    queue.offer(cur.right);
                }
            }
        }
    }
}
