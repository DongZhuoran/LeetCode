/**
 * Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.
 * A region is captured by flipping all 'O's into 'X's in that surrounded region.
 *
 * Example:
 * X X X X
 * X O O X
 * X X O X
 * X O X X
 * 
 * After running your function, the board should be:
 * X X X X
 * X X X X
 * X X X X
 * X O X X
 *
 * Explanation:
 * Surrounded regions shouldnâ€™t be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. 
 * Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are 
 * connected if they are adjacent cells connected horizontally or vertically.
 */

// Two times BFS. Find the area waiting for filled with 'X' in the first time and fill that area in the second time.
// Time complexity: O(n^2).
class Solution {
    public void solve(char[][] board) {
        if (board.length <= 2 || board[0].length <= 2) return;
        
        char[][] visited = new char[board.length][board[0].length];
        for (int i = 0; i < board.length; ++i) {
            for (int j = 0; j < board[0].length; ++j) {
                visited[i][j] = board[i][j];
            }
        }
        
        for (int i = 1; i < board.length - 1; ++i) {
            for (int j = 1; j < board[0].length - 1; ++j) {
                if (visited[i][j] == 'O') {
                    int change = bfs(board, visited, i, j);
                    if (change == 1) {
                        fill(board, i, j);
                    }
                }
            }
        }
    }
    
    private int[] xs = {1, -1, 0, 0};
    private int[] ys = {0, 0, 1, -1};
    
    private int bfs(char[][] board, char[][] visited, int x, int y) {
        if (x < 0 || x == board.length || y < 0 || y == board[0].length) return 0;
        if (visited[x][y] == 'X') return 1;
        
        visited[x][y] = 'X';
        int change = 0;
        for (int i = 0; i < 4; ++i) {
            int nx = x + xs[i];
            int ny = y + ys[i];
            change += bfs(board, visited, nx, ny);
        }
        if (change < 4) {
            return 0;
        } else {
            return 1;
        }
    }
    
    private void fill(char[][] board, int x, int y) {
        if (x < 0 || x == board.length || y < 0 || y == board[0].length || board[x][y] == 'X') return;
        
        board[x][y] = 'X';
        for (int i = 0; i < 4; ++i) {
            int nx = x + xs[i];
            int ny = y + ys[i];
            fill(board, nx, ny);
        }
    }
}

// Reference: https://leetcode.com/problems/surrounded-regions/discuss/41612/A-really-simple-and-readable-C++-solutiononly-cost-12ms
class Solution {
    public void solve(char[][] board) {
        if (board.length <= 2 || board[0].length <= 2) return;
        
        // Left and right borders.
        for (int i = 0; i < board.length; ++i) {
            bfs(board, i, 0);
            bfs(board, i, board[0].length - 1);
        }
        // Upper and lower borders.
        for (int j = 0; j < board[0].length; ++j) {
            bfs(board, 0, j);
            bfs(board, board.length - 1, j);
        }
        
        for (int i = 0; i < board.length; ++i) {
            for (int j = 0; j < board[0].length; ++j) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                } else if (board[i][j] == '1') {
                    board[i][j] = 'O';
                }
            }
        }
    }
    
    private int[] xs = {1, -1, 0, 0};
    private int[] ys = {0, 0, 1, -1};
    
    private void bfs(char[][] board, int x, int y) {
        if (x < 0 || x == board.length || y < 0 || y == board[0].length || 
            board[x][y] == 'X' || board[x][y] == '1') return;
        
        board[x][y] = '1';
        for (int i = 0; i < 4; ++i) {
            bfs(board, x + xs[i], y + ys[i]);
        }
    }
}
