/**
 * Given a binary tree, return all root-to-leaf paths.
 * 
 * Note: A leaf is a node with no children.
 * 
 * Example:
 * Input:
 *
 *     1
 *   /   \
 *  2     3
 *   \
 *    5
 *
 * Output: ["1->2->5", "1->3"]
 *
 * Explanation: All root-to-leaf paths are: 1->2->5, 1->3
 */
 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> paths = new ArrayList<>();
        if (root == null) return paths;
        StringBuilder path = new StringBuilder();
        findPath(root, path, paths);
        return paths;
    }
    
    public void findPath(TreeNode root, StringBuilder path, List<String> paths) {
        path.append(root.val);
        if (root.left == null && root.right == null) {
            paths.add(path.toString());
        }
        if (root.left != null) {
            StringBuilder p = new StringBuilder(path + "->");
            findPath(root.left, p, paths);
        }
        if (root.right != null) {
            StringBuilder p = new StringBuilder(path + "->");
            findPath(root.right, p, paths);
        }
    }
}
