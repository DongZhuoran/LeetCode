/**
 * iven a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
 * According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined 
 * between two nodes p and q as the lowest node in T that has both p and q as descendants 
 * (where we allow a node to be a descendant of itself).”
 *
 * Given the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]
 *
 *         _______3______
 *        /              \
 *     ___5__          ___1__
 *    /      \        /      \
 *    6      _2       0       8
 *          /  \
 *         7   4
 * Example 1:
 * Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
 * Output: 3
 * Explanation: The LCA of of nodes 5 and 1 is 3.
 * 
 * Example 2:
 * Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
 * Output: 5
 * Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself
 *              according to the LCA definition.
 * Note:
 * All of the nodes' values will be unique.
 * p and q are different and both values will exist in the binary tree.
 */
 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
// Time complexity: O(n). Space complexity: O(1).
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null || root.val == p.val || root.val == q.val) {
            return root;
        }
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        return left == null ? right : right == null ? left : root;
    }
}
 
// Time Complexity: O(n). Space complexity: O(n).
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null || p == null || q == null) {
            return null;
        }
        Stack<TreeNode> stack = new Stack<>();
        HashSet<Integer> visited = new HashSet<>();
        boolean hitP = false, hitQ = false;
        stack.push(root);
        while (!stack.empty()) {
            TreeNode curNode;
            if (!hitP && !hitQ) {
                curNode = stack.peek();
            } else {
                curNode = stack.pop();
            }
            if (curNode.val == p.val) {
                hitP = true;
            }
            if (curNode.val == q.val) {
                hitQ = true;
            }
            if (visited.contains(curNode.val) && hitP && hitQ) {
                return curNode;
            } else if (hitP && hitQ) {
                continue;
            }
            if (!visited.contains(curNode.val)) {
                visited.add(curNode.val);
                if (curNode.right != null) {
                    stack.push(curNode.right);
                }
                if (curNode.left != null) {
                    stack.push(curNode.left);
                }
            } else {
                if (!hitP && !hitQ) {
                    stack.pop();
                }
            }
        }
        return null;
    }
}
