/**
 * Design a data structure that supports the following two operations:
 * void addWord(word)
 * bool search(word)
 * 
 * search(word) can search a literal word or a regular expression string containing only letters a-z or .. 
 * A . means it can represent any one letter.
 *
 * Example:
 * addWord("bad")
 * addWord("dad")
 * addWord("mad")
 * search("pad") -> false
 * search("bad") -> true
 * search(".ad") -> true
 * search("b..") -> true
 * 
 * Note:
 * You may assume that all words are consist of lowercase letters a-z.
 */


// Trie.
class WordDictionary {
    private TrieNode root;

    /** Initialize your data structure here. */
    public WordDictionary() {
        root = new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        TrieNode cur = root;
        for (int i = 0; i < word.length(); ++i) {
            if (!cur.children.containsKey(word.charAt(i))) {
                cur.children.put(word.charAt(i), new TrieNode());
            }
            cur = cur.children.get(word.charAt(i));
        }
        cur.isWord = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        return search_helper(word, root);
    }
    
    private boolean search_helper(String word, TrieNode node) {
        TrieNode cur = node;
        for (int i = 0; i < word.length(); ++i) {
            if (word.charAt(i) == '.') {
                boolean res = false;
                for (TrieNode tn: cur.children.values()) {
                    res = res | search_helper(word.substring(i + 1), tn);
                }
                return res;
            } else if (!cur.children.containsKey(word.charAt(i))) {
                return false;
            }
            cur = cur.children.get(word.charAt(i));
        }
        if (cur.isWord) {
            return true;
        } else {
            return false;
        }
    }
    
    class TrieNode {
        boolean isWord;
        Map<Character, TrieNode> children;
        public TrieNode() {
            isWord = false;
            children = new HashMap<>();
        }
    }
}

// Approach #2: hashmap. Time Complexity: Add: O(1). Search: O(n*m), m: length of word to search
//              n: number of words with length m
class WordDictionary {

    Map<Integer, List<String>> map;
    
    /** Initialize your data structure here. */
    public WordDictionary() {
        map = new HashMap<>();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        int l = word.length();
        if (!map.containsKey(l)) map.put(l, new ArrayList<String>());
        map.get(l).add(word);
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        int l = word.length();
        if (map.containsKey(l)) {
            List<String> words = map.get(l);
            for (String w : words) if (compare(w, word)) return true;
        }
        return false;
    }
    
    private boolean compare(String s1, String s2) {
        int p = 0;
        while (p < s1.length()) {
            if (s2.charAt(p) != '.' && s1.charAt(p) != s2.charAt(p)) {
                return false;
            }
            p++;
        }
        return true;
    }

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
