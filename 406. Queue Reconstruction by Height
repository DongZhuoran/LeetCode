/**
 * Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers (h, k),
 * where h is the height of the person and k is the number of people in front of this person who have a height greater
 * than or equal to h. Write an algorithm to reconstruct the queue.
 *
 * Note:
 * The number of people is less than 1,100.
 *
 * Example
 * Input:
 * [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]
 * Output:
 * [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]
 */

// Greedy-1. 
// Reference:https://leetcode.com/problems/queue-reconstruction-by-height/discuss/185967/Concise-Java-Solution-with-explanation.
class Solution {
    public int[][] reconstructQueue(int[][] people) {
        Arrays.sort(people, new Comparator<int[]>() {
            @Override
            public int compare(int[] i1, int[] i2) {
                return i1[0] == i2[0] ? i1[1] - i2[1] : i2[0] - i1[0];
            }
        });
        
        List<int[]> list = new LinkedList<>();
        for (int i = 0; i < people.length; ++i) {
            list.add(people[i][1], people[i]);
        }
        
        int[][] res = new int[people.length][2];
        for (int i = 0; i < people.length; ++i) {
            res[i] = list.get(i);
        }
        
        return res;
    }
}

// [Aceepted] pretty slow...
class Solution {
    public int[][] reconstructQueue(int[][] people) {
        Arrays.sort(people, new Comparator<int[]>() {
            @Override
            public int compare(int[] i1, int[] i2) {
                return i1[0] == i2[0] ? i1[1] - i2[1] : i1[0] - i2[0];
            }
        });
        
        // Deep copy
        int[][] source = new int[people.length][];
        for (int i = 0; i < people.length; ++i) {
            source[i] = Arrays.copyOf(people[i], people[i].length);
        }
        
        List<List<Integer>> list = new ArrayList<List<Integer>>();
        for (int i = 0; i < people.length; ++i) {
            if (list.size() == 0) {
                list.add(new ArrayList(Arrays.asList(people[i][0], people[i][1], source[i][1])));
            } else {
                boolean hit = false;
                for (int j = 0; j < list.size(); ++j) {
                    if (people[i][0] > list.get(j).get(0) && people[i][1] < list.get(j).get(1)) {
                        list.add(j, new ArrayList<>(Arrays.asList(people[i][0], people[i][1], source[i][1])));
                        j++;
                        while (j < list.size()) {
                            list.get(j).set(1, list.get(j).get(1) - 1);
                            j++;
                        }
                        hit = true;
                        break;
                    } else if (people[i][0] <= list.get(j).get(0)) {
                        people[i][1]--;
                    }
                }
                if (!hit) {
                    list.add(new ArrayList(Arrays.asList(people[i][0], people[i][1], source[i][1])));
                }
            }
        }
        
        for (int i = 0; i < list.size(); ++i) {
            people[i][0] = list.get(i).get(0);
            people[i][1] = list.get(i).get(2);
        }
        
        return people;
    }
}
