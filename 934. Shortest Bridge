/**
 * In a given 2D binary array A, there are two islands.  (An island is a 4-directionally connected 
 * group of 1s not connected to any other 1s.)
 *
 * Now, we may change 0s to 1s so as to connect the two islands together to form 1 island.
 *
 * Return the smallest number of 0s that must be flipped.  (It is guaranteed that the answer is 
 * at least 1.)
 *
 * Example 1:
 * Input: [[0,1],[1,0]]
 * Output: 1
 * 
 * Example 2:
 * Input: [[0,1,0],[0,0,0],[0,0,1]]
 * Output: 2
 * 
 * Example 3:
 * Input: [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]
 * Output: 1
 *
 * Note:
 * 1 <= A.length = A[0].length <= 100
 * A[i][j] == 0 or A[i][j] == 1
 */
 
// Approach #1: DFS + BFS. Time O(mn)
class Solution {
    int[][] dirs = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    public int shortestBridge(int[][] A) {
        int m = A.length, n = A[0].length;
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> queue = new LinkedList<>();
        
        // DFS found
        boolean found = false;
        for (int i = 0; i < m; ++ i) {
            for (int j = 0; j < n; ++ j) {
                if (A[i][j] == 1) {
                    dfs(A, i, j, visited, queue);
                    found = true;
                    break;
                }
            }
            if (found) break;
        }
        
        // BFS
        int step = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size-- > 0) {
                int[] pos = queue.poll();
                for (int[] dir: dirs) {
                    int nx = pos[0] + dir[0], ny = pos[1] + dir[1];
                    if (nx < 0 || nx >= m || ny < 0 || ny >= n || visited[nx][ny]) continue;
                    if (A[nx][ny] == 1) return step;
                    visited[nx][ny] = true;
                    queue.add(new int[] {nx, ny});
                }
            }
            step ++;
        }
        return -1;
    }
    
    private void dfs(int[][] A, int x, int y, boolean[][] visited, Queue<int[]> queue) {
        if (x < 0 || x >= A.length || y < 0 || y >= A.length || A[x][y] == 0 || visited[x][y])
            return;
        
        visited[x][y] = true;
        queue.add(new int[] {x, y});
        for (int[] dir: dirs) {
            dfs(A, x + dir[0], y + dir[1], visited, queue);
        }
    }
}
