/**
 * Given a non-negative integer num represented as a string, remove k digits from the number so that the new number 
 * is the smallest possible.
 *
 * Note:
 * The length of num is less than 10002 and will be â‰¥ k.
 * The given num does not contain any leading zero.
 *
 * Example 1:
 * Input: num = "1432219", k = 3
 * Output: "1219"
 * Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
 *
 * Example 2:
 * Input: num = "10200", k = 1
 * Output: "200"
 * Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
 *
 * Example 3:
 * Input: num = "10", k = 2
 * Output: "0"
 * Explanation: Remove all the digits from the number and it is left with nothing which is 0.
 */
 
// Approach #1: Greedy. Time complexity: O(n).
class Solution {
    public String removeKdigits(String num, int k) {
        if (num.length() == 0) return num;
        
        int len = num.length() - k;
        char[] numArr = new char[num.length()];
        int prev = -1;
        for (int i = 0; i < num.length(); ++ i) {
            char c = num.charAt(i);
            while (prev >= 0 && numArr[prev] > c && k > 0) {
                prev --;
                k --;
            }
            numArr[++prev] = c;
        }
        
        int idx = 0;
        while (idx < len && numArr[idx] == '0') idx ++;
        return idx == len ? "0" : new String(numArr, idx, len - idx);
    }
}
