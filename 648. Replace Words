/**
 * In English, we have a concept called root, which can be followed by some other words to form another 
 * longer word - let's call this word successor. For example, the root an, followed by other, which can
 * form another word another.
 *
 * Now, given a dictionary consisting of many roots and a sentence. You need to replace all the successor 
 * in the sentence with the root forming it. If a successor has many roots can form it, replace it with 
 * the root with the shortest length.
 *
 * You need to output the sentence after the replacement.
 *
 * Example 1:
 * Input: dict = ["cat", "bat", "rat"]
 * sentence = "the cattle was rattled by the battery"
 * Output: "the cat was rat by the bat"
 *
 * Note:
 * The input will only have lower-case letters.
 * 1 <= dict words number <= 1000
 * 1 <= sentence words number <= 1000
 * 1 <= root length <= 100
 *1 <= sentence words length <= 1000
 *
 */
 
class Solution {
    private TrieNode root;
    
    public String replaceWords(List<String> dict, String sentence) {
        if (dict == null || dict.size() == 0) {
            return sentence;
        }
        
        // Create a trie
        root = new TrieNode();
        for (String s: dict) {
            insert(s);
        }
        
        StringBuilder res = new StringBuilder();
        String[] words = sentence.split(" ");
        for (int i = 0; i < words.length; ++i) {
            String newWord = search(words[i]);
            if (newWord == null) {
                res.append(words[i] + " ");
            } else {
                res.append(newWord + " ");
            }
        }
        
        return res.toString().trim();
    }
    
    private void insert(String key) {
        TrieNode cur = root;
        for (int i = 0; i < key.length(); ++i) {
            if (!cur.children.containsKey(key.charAt(i))) {
                cur.children.put(key.charAt(i), new TrieNode());
            }
            cur = cur.children.get(key.charAt(i));
        }
        cur.isRoot = true;
    }
    
    private String search(String word) {
        TrieNode cur = root;
        for (int i = 0; i < word.length(); ++i) {
            if (!cur.children.containsKey(word.charAt(i))) {
                return null;
            }
            cur = cur.children.get(word.charAt(i));
            if (cur.isRoot) {
                return word.substring(0, i + 1);
            }
        }
        return null;
    }
    
    class TrieNode {
        boolean isRoot;
        Map<Character, TrieNode> children;
        public TrieNode() {
            isRoot = false;
            children = new HashMap<>();
        }
    }
}
