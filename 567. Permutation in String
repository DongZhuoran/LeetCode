/**
 * Given two strings s1 and s2, write a function to return true if s2 contains the 
 * permutation of s1. In other words, one of the first string's permutations is the 
 * substring of the second string.
 *
 * Example 1:
 * Input: s1 = "ab" s2 = "eidbaooo"
 * Output: True
 * Explanation: s2 contains one permutation of s1 ("ba").
 *
 * Example 2:
 * Input:s1= "ab" s2 = "eidboaoo"
 * Output: False
 *
 * Note:
 * The input strings only contain lower case letters.
 * The length of both given strings is in range [1, 10,000].
 */
 
// Approach #1: Sliding window. Time complexity: O(n).
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if (s1.length() > s2.length()) return false;
        
        Map<Character, Integer> dict = new HashMap<>();
        for (char c: s1.toCharArray()) 
            dict.put(c, dict.getOrDefault(c, 0) + 1);
        
        int counter = dict.size();
        int left = 0, right = 0;
        while (right < s2.length()) {
            char cur = s2.charAt(right);
            if (dict.containsKey(cur)) {
                dict.put(cur, dict.get(cur) - 1);
                if (dict.get(cur) == 0) counter --;
            }
            right ++;
            while (counter == 0) {
                cur = s2.charAt(left);
                if (dict.containsKey(cur)) {
                    dict.put(cur, dict.get(cur) + 1);
                    if (dict.get(cur) > 0) counter ++;
                }
                if (right - left == s1.length()) return true;
                left ++;
            }
        }
        return false;
    }
}

// Approach #2: Sliding window. Time complexity: O(mn).
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if (s1.length() > s2.length()) return false;
        int[] chars = new int[26];
        for (int i = 0; i < s1.length(); i++) {
            chars[s1.charAt(i) - 'a']++;
            chars[s2.charAt(i) - 'a']--;
        }
        if (checkAllZeros(chars)) return true;
        for (int i = s1.length(); i < s2.length(); i++) {
            chars[s2.charAt(i) - 'a']--;
            chars[s2.charAt(i-s1.length()) - 'a']++;
            if (checkAllZeros(chars)) return true;
        }
        return false;
    }
    
    private boolean checkAllZeros(int[] chars) {
        for (int i = 0; i < chars.length; i++) {
            if (chars[i] != 0) return false;
        }
        return true;
    }
}
