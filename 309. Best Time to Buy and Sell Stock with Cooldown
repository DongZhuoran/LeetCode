/**
 * Say you have an array for which the ith element is the price of a given stock on day i.
 * Design an algorithm to find the maximum profit. You may complete as many transactions 
 * as you like (ie, buy one and sell one share of the stock multiple times) with the following 
 * restrictions:
 * - You may not engage in multiple transactions at the same time (ie, you must sell the stock 
 *   before you buy again).
 * - After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)
 * 
 * Example:
 * Input: [1,2,3,0,2]
 * Output: 3 
 * Explanation: transactions = [buy, sell, cooldown, buy, sell]
 *
 * Reference:
 * https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/discuss/75927/Share-my-thinking-process
 */

// dp
class Solution {
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length < 2) {
            return 0;
        }
        int[] hold = new int[prices.length];
        int[] unhold = new int[prices.length];
        hold[0] = -prices[0];
        hold[1] = Math.max(-prices[0], - prices[1]);
        unhold[0] = 0;
        for (int i = 2; i < prices.length; ++i) {
            hold[i] = Math.max(unhold[i - 2] - prices[i], hold[i - 1]);
            unhold[i - 1] = Math.max(hold[i - 2] + prices[i - 1], unhold[i - 2]);
        }
        unhold[prices.length - 1] = Math.max(hold[prices.length - 2] + prices[prices.length - 1], unhold[prices.length - 2]);
        return unhold[prices.length - 1];
    }
}


// recursive solution. Time exceeded.
class Solution {
    public int maxProfit(int[] prices) {
        if (prices == null || prices.length < 2) {
            return 0;
        }
        return calculate(prices, 0, 0);
    }
    
    public int calculate(int[] prices, int n, int flag) {
        if (n >= prices.length) {
            return 0;
        }
        if (flag == 0) {
            return Math.max(calculate(prices, n + 1, 1) - prices[n], calculate(prices, n + 1, 0));
        } else {
            return Math.max(calculate(prices, n + 2, 0) + prices[n], calculate(prices, n + 1, 1));
        }
    }
}
