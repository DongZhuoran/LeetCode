/**
 * Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.
 * see https://leetcode.com/explore/learn/card/array-and-string/202/introduction-to-2d-array/1170/
 *
 * Example:
 * Input: 5
 * Output:
 * [
 *      [1],
 *     [1,1],
 *    [1,2,1],
 *   [1,3,3,1],
 *  [1,4,6,4,1]
 * ]
 */
 
 class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> triangle = new ArrayList<List<Integer>>();
        if (numRows == 0) return triangle;
        triangle.add(Arrays.asList(new Integer[]{1}));
        if (numRows == 1) return triangle;
        triangle.add(Arrays.asList(new Integer[]{1, 1}));
        if (numRows == 2) return triangle;
        
        for (int k = 2; k < numRows; ++k) {
            List<Integer> temp = new ArrayList<>();
            temp.add(1);
            for (int i = 1; i < k; ++i) {
                temp.add(triangle.get(k - 1).get(i - 1) + triangle.get(k - 1).get(i));
            }
            temp.add(1);
            triangle.add(temp);
        }
        return triangle;
    }
}
