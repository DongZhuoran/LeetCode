/**
 * Design a class to find the kth largest element in a stream. Note that it is the kth largest 
 * element in the sorted order, not the kth distinct element.
 *
 * Your KthLargest class will have a constructor which accepts an integer k and an integer array
 * nums, which contains initial elements from the stream. For each call to the method KthLargest.add, 
 * return the element representing the kth largest element in the stream.
 *
 * Example:
 * int k = 3;
 * int[] arr = [4,5,8,2];
 * KthLargest kthLargest = new KthLargest(3, arr);
 * kthLargest.add(3);   // returns 4
 * kthLargest.add(5);   // returns 5
 * kthLargest.add(10);  // returns 5
 * kthLargest.add(9);   // returns 8
 * kthLargest.add(4);   // returns 8
 * Note: 
 * - You may assume that nums' length ≥ k-1 and k ≥ 1.
 */

// Priority Queue. Time complexity: constructor - O(nlog k), add- O(logk), findKthLargest - O(1).
class KthLargest {
    private int k;
    private PriorityQueue<Integer> pq;

    public KthLargest(int k, int[] nums) {
        this.k = k;
        pq = new PriorityQueue<>();
        for (int i = 0; i < nums.length; ++i) {
            this.add(nums[i]);
        }
    }
    
    public int add(int val) {
        if (pq.size() < k) {
            pq.add(val);
        } else {
            if (pq.peek() < val) {
                pq.poll();
                pq.add(val);
            }
        }
        return pq.peek();
    }
}

// BST.
class KthLargest {
    private int k;
    private TreeNode root;

    public KthLargest(int k, int[] nums) {
        this.k = k;
        for (int num: nums) {
            root = add(root, num);
        }
    }
    
    public int add(int val) {
        root = add(root, val);
        return findKthLargest(root);
    }
    
    private TreeNode add(TreeNode root, int val) {
        if (root == null) { return new TreeNode(val); }
        root.count++;
        if (root.val > val) {
            root.left = add(root.left, val);
        } else {
            root.right = add(root.right, val);
        }
        return root;
    }
    
    private int findKthLargest(TreeNode root) {
        int count = this.k;
        while (count > 0) {
            int pos = 1 + (root.right == null ? 0 : root.right.count);
            if (count == pos) {
                break;
            } else if (count > pos) {
                count -= pos;
                root = root.left;
            } else {
                root = root.right;
            }
        }
        return root.val;
    }
    
    class TreeNode {
        int val, count = 1;
        TreeNode left, right;
        public TreeNode(int val) { this.val = val; }
    }
}

/**
 * Your KthLargest object will be instantiated and called as such:
 * KthLargest obj = new KthLargest(k, nums);
 * int param_1 = obj.add(val);
 */
