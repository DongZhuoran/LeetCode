/**
 * Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.
 *
 * Example:
 * Input:
 * 
 *    1
 *     \
 *      3
 *     /
 *    2
 * 
 * Output:
 * 1
 *
 * Explanation:
 * The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).
 *
 * Note: There are at least two nodes in this BST.
 */
 
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
// Approach #1: Two pass. Time complexity: O(n).
class Solution {
    public int getMinimumDifference(TreeNode root) {
        List<Integer> inorder = inorderTraversal(root);
        int ans = Integer.MAX_VALUE;
        for (int i = 1; i < inorder.size(); ++i) {
            int diff = Math.abs(inorder.get(i) - inorder.get(i - 1));
            ans = ans > diff ? diff : ans;
        }
        return ans;
    }
    
    public List<Integer> inorderTraversal(TreeNode root) {
        if (root == null) {
            return new ArrayList<>();
        }
        
        List<Integer> left = inorderTraversal(root.left);
        left.add(root.val);
        left.addAll(inorderTraversal(root.right));
        return left;
    }
}

// Approach #2: One pass.
class Solution {
    private int min = Integer.MAX_VALUE;
    private Integer prev = null;
    
    public int getMinimumDifference(TreeNode root) {
        if (root == null) return -1;
        
        getMinimumDifference(root.left);
        if (prev != null) {
            min = Math.min(min, root.val - prev);
        }
        prev = root.val;
        getMinimumDifference(root.right);
        
        return min;
    }
}
