/**
 * There is a strange printer with the following two special requirements:
 *
 * The printer can only print a sequence of the same character each time.
 * At each turn, the printer can print new characters starting from and ending at any places, and 
 * will cover the original existing characters.
 * Given a string consists of lower English letters only, your job is to count the minimum number 
 * of turns the printer needed in order to print it.
 *
 * Example 1:
 * Input: "aaabbb"
 * Output: 2
 * Explanation: Print "aaa" first and then print "bbb".
 * 
 * Example 2:
 * Input: "aba"
 * Output: 2
 * Explanation: Print "aaa" first and then print "b" from the second place of the string, which will 
 * cover the existing character 'a'.
 * 
 * Hint: Length of the given string will not exceed 100. 
 */
 
// Approach #1: DFS + memo.
// Time O(N^3): For each of O(N^2), possible states representing a subarray of s, we perform O(N) work 
//              iterating through k.
// Space O(N^2)
class Solution {
    int[][] memo;
    public int strangePrinter(String s) {
        int N = s.length();
        memo = new int[N][N];
        return dfs(s, 0, N - 1);
    }
    
    private int dfs(String s, int i, int j) {
        if (i > j) return 0;
        if (memo[i][j] == 0) {
            int res = 1 + dfs(s, i + 1, j);
            for (int k = i + 1; k <= j; ++ k)
                if (s.charAt(i) == s.charAt(k))
                    res = Math.min(res, dfs(s, i, k - 1) + dfs(s, k + 1, j));
            memo[i][j] = res;
        }
        return memo[i][j];
    }
}
