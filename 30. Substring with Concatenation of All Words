/**
 * You are given a string, s, and a list of words, words, that are all of the same length. 
 * Find all starting indices of substring(s) in s that is a concatenation of each word in 
 * words exactly once and without any intervening characters.
 *
 * Example 1:
 * Input:
 *   s = "barfoothefoobarman",
 *   words = ["foo","bar"]
 * Output: [0,9]
 * Explanation: Substrings starting at index 0 and 9 are "barfoor" and "foobar" respectively.
 * The output order does not matter, returning [9,0] is fine too.
 * 
 * Example 2:
 * Input:
 *   s = "wordgoodgoodgoodbestword",
 *   words = ["word","good","best","word"]
 * Output: [] 
 */
 
// Approach #1: 2 HashMaps. Time -> O(mn).
class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> res = new ArrayList<>();
        if (words.length == 0 || s.length() < words.length * words[0].length()) return res;
        
        Map<String, Integer> dict = new HashMap<>();
        for (String word: words) {
            dict.put(word, dict.getOrDefault(word, 0) + 1);
        }
        
        int N = s.length();
        int wordCount = words.length, wordLen = words[0].length();
        for (int i = 0; i < N - wordCount * wordLen + 1; ++ i) {
            Map<String, Integer> seen = new HashMap<>();
            int j = 0;
            while (j < wordCount) {
                String word = s.substring(i + j * wordLen, i + (j + 1) * wordLen);
                if (dict.containsKey(word)) {
                    seen.put(word, seen.getOrDefault(word, 0) + 1);
                    if (seen.get(word) > dict.get(word)) break;
                } else {
                    break;
                }
                j ++;
            }
            if (j == wordCount) res.add(i);
        }
        return res;
    }
}
