/**
 * Given a non-negative integer N, find the largest number that is less than or equal to N with monotone increasing digits.
 *
 * (Recall that an integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x <= y.)
 * 
 * Example 1:
 * Input: N = 10
 * Output: 9
 *
 * Example 2:
 * Input: N = 1234
 * Output: 1234
 *
 * Example 3:
 * Input: N = 332
 * Output: 299
 *
 * Note: N is an integer in the range [0, 10^9].
 */
 
// Approach #1: Straightforward. Time complexity: O(n), where n is the # of digits.
class Solution {
    public int monotoneIncreasingDigits(int N) {
        if (N == 0) return 0;
        
        char[] nArr = String.valueOf(N).toCharArray();
        for (int i = 0; i < nArr.length - 1; ++ i) {
            if (nArr[i] > nArr[i + 1]) {
                while (i > 0 && nArr[i] == nArr[i - 1]) i --;
                nArr[i++] --;
                while (i < nArr.length) nArr[i++] = '9';
                break;
            }
        }
        return Integer.valueOf(new String(nArr));
    }
}
