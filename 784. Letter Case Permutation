/**
 * Given a string S, we can transform every letter individually to be lowercase or uppercase to create 
 * nother string.  Return a list of all possible strings we could create.
 *
 * Examples:
 * Input: S = "a1b2"
 * Output: ["a1b2", "a1B2", "A1b2", "A1B2"]
 *
 * Input: S = "3z4"
 * Output: ["3z4", "3Z4"]
 *
 * Input: S = "12345"
 * Output: ["12345"]
 * 
 * Note:
 * S will be a string with length between 1 and 12.
 * S will consist only of letters or digits.
 */

// Backtracking. Time complexity: O(2^n), where n is the number of digits in the S.
class Solution {
    public List<String> letterCasePermutation(String S) {
        if (S == null) {
            return null;
        }
        char[] ch = S.toCharArray();
        List<String> res = new ArrayList<>();
        backtrack(ch, res, new StringBuilder(S), 0);
        return res;
    }
    
    private void backtrack(char[] ch, List<String> res, StringBuilder sb, int start) {
        res.add(sb.toString());
        for (int i = start; i < ch.length; ++i) {
            if (Character.isLetter(ch[i])) {
                char temp = ch[i];
                if (Character.isLowerCase(ch[i])) {
                    sb.setCharAt(i, Character.toUpperCase(ch[i]));
                    backtrack(ch, res, sb, i + 1);
                }
                if (Character.isUpperCase(ch[i])) {
                    sb.setCharAt(i, Character.toLowerCase(ch[i]));
                    backtrack(ch, res, sb, i + 1);
                }
                sb.setCharAt(i, temp);
            }
        }
    }
}
