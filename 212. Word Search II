/**
 * Given a 2D board and a list of words from the dictionary, find all words in the board.
 * 
 * Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those
 * horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.
 *
 * Example:
 * Input: 
 * words = ["oath","pea","eat","rain"] and board =
 * [
 *   ['o','a','a','n'],
 *   ['e','t','a','e'],
 *   ['i','h','k','r'],
 *   ['i','f','l','v']
 * ]
 *
 * Output: ["eat","oath"]
 * 
 * Note:
 * You may assume that all inputs are consist of lowercase letters a-z.
 */

// DFS + Trie.
class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        List<String> res = new ArrayList<>();
        TrieNode root = buildTrie(words);
        for (int i = 0; i < board.length; ++i) {
            for (int j = 0; j < board[i].length; ++j) {
                dfs(board, i, j, root, res);
            }
        }
        return res;
    }
    
    private int[] ax = {1, -1, 0, 0};
    private int[] ay = {0, 0, 1, -1};
    
    private void dfs(char[][] board, int x, int y, TrieNode node, List<String> res) {
        if (x < 0 || x == board.length || y < 0 || y == board[0].length || 
                board[x][y] == '#' || node.children[board[x][y] - 'a'] == null) { 
            return;
        }
        
        char ch = board[x][y];
        node = node.children[ch - 'a'];
        if (node.word != null) {
            res.add(node.word);
            node.word = null;
        }
        
        board[x][y] = '#';
        for (int i = 0; i < 4; ++i) {
            dfs(board, x + ax[i], y + ay[i], node, res);
        }
        board[x][y] = ch;
    }
    
    private TrieNode buildTrie(String[] words) {
        TrieNode root = new TrieNode();
        for (String word: words) {
            TrieNode cur = root;
            for (char ch: word.toCharArray()) {
                int idx = ch - 'a';
                if (cur.children[idx] == null) {
                    cur.children[idx] = new TrieNode();
                }
                cur = cur.children[idx];
            }
            cur.word = word;
        }
        return root;
    }
    
    class TrieNode {
        String word;
        TrieNode[] children = new TrieNode[26];
    }
}

// Pure dfs.
class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        List<String> res = new ArrayList<>();
        // Use a hashset here to avoid search duplicated words.
        Set<String> set = new HashSet<>();
        for (String word: words) {
            if (!set.contains(word)) {
                set.add(word);
            } else {
                continue;
            }
            boolean[][] visited = new boolean[board.length][board[0].length];
            for (int i = 0; i < board.length; ++i) {
                for (int j = 0; j < board[i].length; ++j) {
                    if (dfs(board, word, visited, i, j, 0)) {
                        res.add(word);
                        i = board.length;
                        break;
                    }
                }
            }
        }
        return res;
    }
    
    private int[] ax = {1, -1, 0, 0};
    private int[] ay = {0, 0, 1, -1};
    
    private boolean dfs(char[][] board, String word, boolean[][] visited, int x, int y, int idx) {
        if (idx == word.length()) { return true; }
        if (x < 0 || x == board.length || y < 0 || y == board[0].length) { return false; }
        
        if (board[x][y] == word.charAt(idx) && !visited[x][y]) {
            visited[x][y] = true;
            for (int i = 0; i < 4; ++i) {
                if (dfs(board, word, visited, x + ax[i], y + ay[i], idx + 1)) {
                    return true;
                }
            }
            visited[x][y] = false;
        }
        return false;
    }
}
