/**
 * Given two strings str1 and str2, return the shortest string that has both str1 and 
 * str2 as subsequences.  If multiple answers exist, you may return any of them.
 *
 * (A string S is a subsequence of string T if deleting some number of characters from 
 * T (possibly 0, and the characters are chosen anywhere from T) results in the string S.)
 *
 * Example 1:
 * Input: str1 = "abac", str2 = "cab"
 * output: "cabac"
 * Explanation: 
 * str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
 * str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
 * The answer provided is the shortest such string that satisfies these properties.
 *
 * Note:
 * 1 <= str1.length, str2.length <= 1000
 * str1 and str2 consist of lowercase English letters.
 */
 
// Approach #1: DP + build result randomly. Time/Space -> O(mn).
class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        int m = str1.length(), n = str2.length();
        int p1 = 0, p2 = 0;
        StringBuilder sb = new StringBuilder();
        for (char c: LCS(str1, str2).toCharArray()) {
            while(str1.charAt(p1) != c) sb.append(str1.charAt(p1++));
            while(str2.charAt(p2) != c) sb.append(str2.charAt(p2++));
            sb.append(c);
            p1 ++;
            p2 ++;
        }
        sb.append(str1.substring(p1)).append(str2.substring(p2));
        return sb.toString();
    }
    
    public String LCS(String str1, String str2) {
        int m = str1.length(), n = str2.length();
        String[][] dp = new String[m + 1][n + 1];
        for (int i = 0; i <= m; ++ i) dp[i][0] = "";
        for (int j = 0; j <= n; ++ j) dp[0][j] = "";
        
        for (int i = 1; i <= m; ++ i) {
            for (int j = 1; j <= n; ++ j) {
                if (str1.charAt(i - 1) == str2.charAt(j - 1)) 
                    dp[i][j] = dp[i - 1][j - 1] + str1.charAt(i - 1);
                else 
                    dp[i][j] = dp[i - 1][j].length() > dp[i][j - 1].length() ?
                                dp[i - 1][j] : dp[i][j - 1];
            }
        }
        
        return dp[m][n];
    }
}

// Approach #2: DP + build result through dp array.
class Solution {
   
    public String shortestCommonSupersequence(String s1, String s2) {
        int m = s1.length(), n = s2.length();
        int[][] dp = new int[m + 1][n + 1];
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (s1.charAt(i) == s2.charAt(j)) {
                    dp[i + 1][j + 1] = 1 + dp[i][j];    
                }else {
                    dp[i + 1][j + 1] = Math.max(dp[i + 1][j], dp[i][j + 1]);
                }
            }
        }
		
        // Build result.
        StringBuilder sb = new StringBuilder();
        int i = m - 1, j = n - 1;
        while (i >= 0 || j >= 0) { 
            if (i < 0 ^ j < 0) { // only one string reaches left end.
                char c = i < 0 ? s2.charAt(j--) : s1.charAt(i--); // remaining chars in the other string.
                sb.append(c);
            }else if (s1.charAt(i) == s2.charAt(j)) { // common char in LCS.
                sb.append(s1.charAt(i)); // append the char of either s1 or s2.
                --i; --j;  
            }else { // the char is not in LCS.
                char c = dp[i][j + 1] > dp[i + 1][j] ? s1.charAt(i--) : s2.charAt(j--); // the char corresponding to larger dp value.
                sb.append(c);
            }
        } 
        return sb.reverse().toString();
    }
}
