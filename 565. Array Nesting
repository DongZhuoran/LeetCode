/**
 * A zero-indexed array A of length N contains all integers from 0 to N-1. Find and return the 
 * longest length of set S, where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule 
 * below.
 *
 * Suppose the first element in S starts with the selection of element A[i] of index = i, the 
 * next element in S should be A[A[i]], and then A[A[A[i]]]â€¦ By that analogy, we stop adding 
 * right before a duplicate element occurs in S.
 *
 * Example 1:
 * Input: A = [5,4,0,3,1,6,2]
 * Output: 4
 * Explanation: 
 * A[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.
 * One of the longest S[K]:
 * S[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}
 *
 * Note:
 * 1. N is an integer within the range [1, 20,000].
 * 2. The elements of A are all distinct.
 * 3. Each element of A is an integer within the range [0, N-1].
 */
 
// Approach #1: Visited Array/HashSet. Time: O(n). Space: O(n).
class Solution {
    int max = 0;
    public int arrayNesting(int[] nums) {
        if (nums.length == 0) return 0;
        
        Set<Integer> cache = new HashSet<>();
        for (int i = 0; i < nums.length; ++ i) {
            int len = 0;
            int index = i;
            while (!cache.contains(index)) {
                cache.add(index);
                len ++;
                index = nums[index];
            }
            max = Math.max(max, len);
        }
        return max;
    }
}

// Approach #2: Without Extra Space.
class Solution {
    public int arrayNesting(int[] nums) {
        int max = 1;
        for (int i = 0; i < nums.length; ++ i) {
            int len = 0;
            int index = i;
            while (index != nums[index]) {
                len ++;
                int tmp = index;
                index = nums[index];
                nums[tmp] = tmp;
            }
            max = Math.max(max, len);
        }
        return max;
    }
}
