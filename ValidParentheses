/**
 * Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine 
 * if the input string is valid.
 * An input string is valid if:
 * 1. Open brackets must be closed by the same type of brackets.
 * 2. Open brackets must be closed in the correct order.
 * 3. Note that an empty string is also considered valid.
 *
 * Example 1:
 * Input: "()"
 * Output: true
 * 
 * Example 2:
 * Input: "()[]{}"
 * Output: true
 * 
 * Example 3:
 * Input: "(]"
 * Output: false
 * 
 * Example 4:
 * Input: "([)]"
 * Output: false
 * 
 * Example 5:
 * Input: "{[]}"
 * Output: true 
 */
 
 // Wrong solution, test cases like "}{][)(" will pass
 class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        
        for (int i = 0; i < s.length(); i++) {
            if (!stack.empty() && (stack.peek()).equals(getBack(s.charAt(i)))) {
                stack.pop();
            } else {
                stack.push(s.charAt(i));
            }
        }
        if (stack.empty()) {
            return true;
        } else {
            return false;
        }
    }
    
    public char getBack(char c) {
        if (c == '(') return ')';
        if (c == ')') return '(';
        if (c == '{') return '}';
        if (c == '}') return '{';
        if (c == '[') return ']';
        if (c == ']') return '[';
        throw new IllegalArgumentException("");
    }
}

// Correct solution
class Solution {
    public boolean isValid(String s) {
	      Stack<Character> stack = new Stack<Character>();
	      for (char c : s.toCharArray()) {
		        if (c == '(')
			          stack.push(')');
		        else if (c == '{')
			          stack.push('}');
		        else if (c == '[')
			          stack.push(']');
		        else if (stack.isEmpty() || stack.pop() != c)
			          return false;
        }
	      return stack.isEmpty();
    }
}

