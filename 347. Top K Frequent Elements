/**
 * Given a non-empty array of integers, return the k most frequent elements.
 *
 * Example 1:
 * Input: nums = [1,1,1,2,2,3], k = 2
 * Output: [1,2]
 *
 * Example 2:
 * Input: nums = [1], k = 1
 * Output: [1]
 *
 * Note:
 * You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
 * Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
 */

// Approach #1: HashMap + PriorityQueue. Time complexity: O(klogn).
class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        List<Integer> res = new ArrayList<>();
        
        if (nums == null || nums.length == 0) {
            return res;
        }
        
        Map<Integer, Integer> map = new HashMap<>();
        for (int n: nums) {
            map.put(n, 1 + map.getOrDefault(n, 0));
        }
        
        PriorityQueue<Map.Entry<Integer, Integer>> pq = new PriorityQueue<>(new Comparator<Map.Entry<Integer, Integer>>() {
            public int compare(Map.Entry<Integer, Integer> e1, Map.Entry<Integer, Integer> e2) {
                return e2.getValue() - e1.getValue();
            }
        });
        
        for (Map.Entry<Integer, Integer> entry: map.entrySet()) {
            pq.add(entry);
        }
        
        for (int i = 0; i < k; ++i) {
            res.add(pq.poll().getKey());
        }
        return res;
    }
}
