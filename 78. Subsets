/**
 * Given a set of distinct integers, nums, return all possible subsets (the power set).
 *
 * Note: The solution set must not contain duplicate subsets.
 *
 * Example:
 * Input: nums = [1,2,3]
 * Output:
 * [
 *   [3],
 *   [1],
 *   [2],
 *   [1,2,3],
 *   [1,3],
 *   [2,3],
 *   [1,2],
 *   []
 * ]
 */

// Backtracking. Time complexity: O(2^n).
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        backtracking(nums, res, new ArrayList<>(), 0);
        return res;
    }
    
    private void backtracking(int[] nums, List<List<Integer>> res, List<Integer> subset, int start) {
        res.add(new ArrayList<>(subset));
        for (int i = start; i < nums.length; ++i) {
            subset.add(nums[i]);
            backtracking(nums, res, subset, i + 1);
            subset.remove(subset.size() - 1);
        }
    }
}

// Queue. Time complexity: O(2^n).
class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        // Corner case.
        if (nums == null) {
            return null;
        } else if (nums.length == 0) {
            return new ArrayList<>(new ArrayList<>());
        }
        
        Arrays.sort(nums);  // O(nlogn)
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        Queue<List<Integer>> queue = new LinkedList<>();
        res.add(new ArrayList<>());
        queue.offer(new ArrayList<>());
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; ++i) {
                List<Integer> cur = queue.poll();
                for (int j = nums.length - 1; j >= 0 && (cur.size() == 0 || nums[j] > cur.get(cur.size() - 1)); --j) {
                    List<Integer> subset = new ArrayList<>(cur);
                    subset.add(nums[j]);
                    res.add(subset);
                    queue.offer(subset);
                }
            }
        }
        return res;
    }
}
